{
  "address": "0x9Fc072232a3a38798E5437248Ce24aA2DdF9ebb7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ApprovedProsumers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_prosumerID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_aadharId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceMatic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakedEnergyBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unApprovedProsumerID",
          "type": "uint256"
        }
      ],
      "name": "DisApproveProsumer_OwnerSpecific",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Transaction",
      "outputs": [
        {
          "internalType": "address",
          "name": "_producer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_producerID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_consumerID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_consumerEnergyNeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_producerUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_producerPaybleAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unitEnergyPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "excessEnergyToken",
          "type": "uint256"
        }
      ],
      "name": "advert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unApprovedProsumerID",
          "type": "uint256"
        }
      ],
      "name": "approveProsumer_OwnerSpecific",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "producerID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "energy_need",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "energyBurned",
          "type": "uint256"
        }
      ],
      "name": "burnEnergy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "disapproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isProsumer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mySetUnitPrice_Matic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mySetUnitPrice_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "processTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "energyProduced",
          "type": "uint256"
        }
      ],
      "name": "produceEnergy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prosumerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "prosumerID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "regFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeProsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aadharNo",
          "type": "uint256"
        }
      ],
      "name": "req_Registration",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_regFee",
          "type": "uint256"
        }
      ],
      "name": "setRegFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "showApprovalList_OwnerSpecific",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_prosumerID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_aadharId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceMatic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakedEnergyBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnergyTrade.prosumer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_unapprovedProsumerAddress",
          "type": "address"
        }
      ],
      "name": "showApprovalStatus_OwnerSpecific",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "showUnapprovalList_OwnerSpecific",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_prosumerID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_aadharId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceMatic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakedEnergyBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnergyTrade.prosumer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "show_Approved_Prosumers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_prosumerID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_aadharId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceMatic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakedEnergyBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnergyTrade.prosumer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "show_Unapproved_Prosumers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_prosumerID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_aadharId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceMatic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakedEnergyBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnergyTrade.prosumer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unApprovedProsumers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_prosumerID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_aadharId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceMatic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakedEnergyBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewEnergyBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewEscrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewMaticBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa63110a52abfb75dd2b5b947ef5c8c115ee06beba42175ab8e596f94d7107e6c",
  "receipt": {
    "to": null,
    "from": "0x85b3dB26424a88e7C1319E40a6324d64Acf1fFA2",
    "contractAddress": "0x9Fc072232a3a38798E5437248Ce24aA2DdF9ebb7",
    "transactionIndex": 20,
    "gasUsed": "3498513",
    "logsBloom": "0x00000000000000000000000000000000080000000000000000000010000000000000000000000020000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000010080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000020000000000000000004000000000000000000001000000000000000000000000000000100000001000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x346796ac17cbce137237172a5df54d2c2042841aa53ee5c21b7ce5342762cb62",
    "transactionHash": "0xa63110a52abfb75dd2b5b947ef5c8c115ee06beba42175ab8e596f94d7107e6c",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 29502507,
        "transactionHash": "0xa63110a52abfb75dd2b5b947ef5c8c115ee06beba42175ab8e596f94d7107e6c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000085b3db26424a88e7c1319e40a6324d64acf1ffa2",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000012258b1fe36c4300000000000000000000000000000000000000000000000072e51240c0cb939400000000000000000000000000000000000000000000092346082eb22626321f00000000000000000000000000000000000000000000000072d2ecb5a0e82751000000000000000000000000000000000000000000000923461a543d46099e62",
        "logIndex": 103,
        "blockHash": "0x346796ac17cbce137237172a5df54d2c2042841aa53ee5c21b7ce5342762cb62"
      }
    ],
    "blockNumber": 29502507,
    "cumulativeGasUsed": "8229129",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x85b3dB26424a88e7C1319E40a6324d64Acf1fFA2",
      "0xaA644EfCDFC1Adaf3CAb69Ae683638f4705F4C81",
      "0xB6E7F3234C709B6C96a60D14A85d41FADDd22FDA"
    ],
    2
  ],
  "numDeployments": 2,
  "solcInputHash": "487e00cb023d932d0102d019f59ec7c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ApprovedProsumers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unApprovedProsumerID\",\"type\":\"uint256\"}],\"name\":\"DisApproveProsumer_OwnerSpecific\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Transaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_producer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_producerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_consumerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_consumerEnergyNeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_producerUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_producerPaybleAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unitEnergyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"excessEnergyToken\",\"type\":\"uint256\"}],\"name\":\"advert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unApprovedProsumerID\",\"type\":\"uint256\"}],\"name\":\"approveProsumer_OwnerSpecific\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"producerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"energy_need\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"energyBurned\",\"type\":\"uint256\"}],\"name\":\"burnEnergy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disapproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isProsumer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mySetUnitPrice_Matic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mySetUnitPrice_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"energyProduced\",\"type\":\"uint256\"}],\"name\":\"produceEnergy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prosumerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prosumerID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeProsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aadharNo\",\"type\":\"uint256\"}],\"name\":\"req_Registration\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_regFee\",\"type\":\"uint256\"}],\"name\":\"setRegFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showApprovalList_OwnerSpecific\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct EnergyTrade.prosumer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unapprovedProsumerAddress\",\"type\":\"address\"}],\"name\":\"showApprovalStatus_OwnerSpecific\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showUnapprovalList_OwnerSpecific\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct EnergyTrade.prosumer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"show_Approved_Prosumers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct EnergyTrade.prosumer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"show_Unapproved_Prosumers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct EnergyTrade.prosumer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unApprovedProsumers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewEnergyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewEscrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewMaticBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLatestPrice()\":{\"notice\":\"Returns the latest price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnergyTrade.sol\":\"EnergyTrade\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/EnergyToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Energy_Token is ERC20{\\n    /*\\n        Initial Supply is 50 ,- 50 WEI\\n        Initial supply 50e18\\n        or, 50*10**18\\n    */\\n    constructor () ERC20(\\\"Enery Token\\\" , \\\"UNIT\\\"){}\\n\\n    function mint(address to, uint256 value)external{\\n        _mint(to, value);\\n    }\\n\\n    function burn(address to, uint256 value)external{\\n        _burn(to, value);\\n    }\\n    \\n\\n}\",\"keccak256\":\"0x884386c6e9eed0e26d2c62e5ec74232b5b7ed3fbf770e5d999e9ba8bfcc7ca12\",\"license\":\"UNLICENSED\"},\"contracts/EnergyTrade.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./EnergyToken.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract EnergyTrade is Energy_Token, PriceConverter {\\r\\n    /*************Global Variables************/\\r\\n\\r\\n    /*-------Owner Variables-------------------------*/\\r\\n\\r\\n    address[] public owners; //Array to store all the owners in the Network\\r\\n    mapping(address => bool) public isOwner;\\r\\n    uint256 public required; //Min Owners required for Approval\\r\\n    uint256 public regFee; //Reg Fee set by the owner, to add prosumers in the Network\\r\\n    address escrowAccount; //Address of the Deployed Smart Contract\\r\\n\\r\\n    /*-----------------------------------------------------------------------------------------------*/\\r\\n\\r\\n    /*-------Prosumer Variables-------------------------*/\\r\\n\\r\\n    struct prosumer {\\r\\n        uint256 _prosumerID;\\r\\n        address _address;\\r\\n        uint256 _aadharId; //12 digit\\r\\n        bool _approved;\\r\\n        uint256 _energyUnitPriceUSD;\\r\\n        uint256 _energyUnitPriceMatic;\\r\\n        uint256 _stakedEnergyBalance;\\r\\n    }\\r\\n    mapping(address => bool) public isProsumer;\\r\\n\\r\\n    /* Created These Maps to optimise Gas */\\r\\n    mapping(uint256 => address) public prosumerAddress;\\r\\n    mapping(address => uint256) public prosumerID;\\r\\n\\r\\n    prosumer[] public ApprovedProsumers;\\r\\n\\r\\n    mapping(address => mapping(address => bool)) public approved; //address1 = unapprovedProsumer address, address2 = address Of Owner, bool\\r\\n    mapping(address => mapping(address => bool)) public disapproved; //address1 = unapprovedProsumer address, address2 = address Of Owner, bool\\r\\n\\r\\n    //--> Pending States before Approval\\r\\n\\r\\n    prosumer[] public unApprovedProsumers;\\r\\n\\r\\n    struct Txn {\\r\\n        address _producer;\\r\\n        address _consumer;\\r\\n        uint256 _producerID;\\r\\n        uint256 _consumerID;\\r\\n        uint256 _consumerEnergyNeed;\\r\\n        uint256 _producerUnitPrice; //MATIC\\r\\n        uint256 _producerPaybleAmount;\\r\\n    }\\r\\n\\r\\n    Txn[] public Transaction;\\r\\n\\r\\n    /*-----------------------------------------------------------------------------------------------*/\\r\\n\\r\\n    /*-----------Transaction Variables----------------------------------------------*/\\r\\n\\r\\n    /****************Constructor************/\\r\\n\\r\\n    constructor(address[] memory _owners, uint _required) {\\r\\n        //We will pass multiple owners & set a particular requirement number of apporvals needed\\r\\n\\r\\n        require(_owners.length > 0, \\\"Owners Required\\\");\\r\\n        require(_required > 0 && required <= _owners.length, \\\"Invalid required number of owners\\\");\\r\\n\\r\\n        for (uint i; i < _owners.length; i++) {\\r\\n            address owner = _owners[i];\\r\\n            require(owner != address(0), \\\"invalid owner\\\");\\r\\n            require(!isOwner[owner], \\\"Owner is not unique\\\");\\r\\n\\r\\n            isOwner[owner] = true;\\r\\n            owners.push(owner);\\r\\n        }\\r\\n\\r\\n        required = _required;\\r\\n        escrowAccount = address(this);\\r\\n    }\\r\\n\\r\\n    /*-----------------------------------------------------------------------------------------------*/\\r\\n\\r\\n    /********************ESCROW FUNCTIONS**********************************/\\r\\n\\r\\n    //--> 1. Set Registration Fee\\r\\n\\r\\n    function setRegFee(uint256 _regFee) public onlyOwner {\\r\\n        regFee = _regFee;\\r\\n    }\\r\\n\\r\\n    //--> 2. Verify Details of Unapproved Prosumer\\r\\n\\r\\n    //-->2.1 Internal Functions\\r\\n\\r\\n    function _getApprovalCount(uint256 _unApprovedProsumerID) private view returns (uint256 count) {\\r\\n        for (uint256 i = 0; i < owners.length; i++) {\\r\\n            if (approved[unApprovedProsumers[_unApprovedProsumerID]._address][owners[i]]) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    function _getDisApprovalCount(\\r\\n        uint256 _unApprovedProsumerID\\r\\n    ) private view returns (uint256 count) {\\r\\n        for (uint256 i = 0; i < owners.length; i++) {\\r\\n            if (disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][owners[i]]) {\\r\\n                count += i;\\r\\n            }\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    function deleteElementFrom_UnApprovedProsumers(\\r\\n        uint256 _unApprovedProsumerID\\r\\n    ) internal onlyOwner {\\r\\n        require(\\r\\n            _unApprovedProsumerID < unApprovedProsumers.length,\\r\\n            \\\"Invalid unapprovedProsumer Index\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = _unApprovedProsumerID; i < unApprovedProsumers.length - 1; i++) {\\r\\n            unApprovedProsumers[i] = unApprovedProsumers[i + 1];\\r\\n        }\\r\\n        unApprovedProsumers.pop();\\r\\n    }\\r\\n\\r\\n    /*-----------------------------------------------------------------------------------------------*/\\r\\n\\r\\n    //-->2.2 Show all Approved or Unapproved Prosumer\\r\\n\\r\\n    function show_Unapproved_Prosumers() public view onlyOwner returns (prosumer[] memory) {\\r\\n        return unApprovedProsumers;\\r\\n    }\\r\\n\\r\\n    function show_Approved_Prosumers() public view returns (prosumer[] memory) {\\r\\n        //Public Function anybody can call\\r\\n        return ApprovedProsumers;\\r\\n    }\\r\\n\\r\\n    //-->2.3 Approval Status [Owner Specific]\\r\\n\\r\\n    function showApprovalStatus_OwnerSpecific(\\r\\n        address _unapprovedProsumerAddress\\r\\n    ) public view onlyOwner returns (string memory) {\\r\\n        if (approved[_unapprovedProsumerAddress][msg.sender]) {\\r\\n            return (\\\"Prosumer Approved\\\");\\r\\n        } else if (disapproved[_unapprovedProsumerAddress][msg.sender]) {\\r\\n            return (\\\"Prosumer Disapproved\\\");\\r\\n        } else {\\r\\n            return (\\\"Prosumer Not Approved Yet\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //--> 2.4 Show UnApproved Prosumer [Owner Specific]\\r\\n\\r\\n    function showUnapprovalList_OwnerSpecific() public view onlyOwner returns (prosumer[] memory) {\\r\\n        prosumer[] memory pr = new prosumer[](unApprovedProsumers.length);\\r\\n        for (uint256 i = 0; i < unApprovedProsumers.length; i++) {\\r\\n            if (approved[unApprovedProsumers[i]._address][msg.sender] == false) {\\r\\n                pr[i] = unApprovedProsumers[i];\\r\\n            }\\r\\n        }\\r\\n        return pr;\\r\\n    }\\r\\n\\r\\n    //--> 2.5 Show Approved Prosumer [Owner Specific]\\r\\n\\r\\n    function showApprovalList_OwnerSpecific() public view onlyOwner returns (prosumer[] memory) {\\r\\n        prosumer[] memory pr = new prosumer[](unApprovedProsumers.length);\\r\\n        for (uint256 i = 0; i < unApprovedProsumers.length; i++) {\\r\\n            if (approved[unApprovedProsumers[i]._address][msg.sender] == true) {\\r\\n                pr[i] = unApprovedProsumers[i];\\r\\n            }\\r\\n        }\\r\\n        return pr;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n- Once Prosumer is Approved in the Network, you cannot remove him.\\r\\n- Why? Because he has already gone through a verification process by multiple owners.\\r\\n- Though the function can be implemented in Future, if we feel the need of it\\r\\n*/\\r\\n\\r\\n    //--> 3. Approve Prosumer\\r\\n\\r\\n    function approveProsumer_OwnerSpecific(uint256 _unApprovedProsumerID) public onlyOwner {\\r\\n        require(\\r\\n            _unApprovedProsumerID < unApprovedProsumers.length,\\r\\n            \\\"Invalid Unapproved Prosumer ID\\\"\\r\\n        );\\r\\n        require(\\r\\n            approved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] == false,\\r\\n            \\\"Prosumer Already approved by you\\\"\\r\\n        );\\r\\n\\r\\n        approved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] = true;\\r\\n\\r\\n        //If disapproved earlier then wants to approve\\r\\n        if (disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender]) {\\r\\n            disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] = false;\\r\\n        }\\r\\n\\r\\n        //check if approval > unapproval\\r\\n\\r\\n        if (_getApprovalCount(_unApprovedProsumerID) >= required) {\\r\\n            // console.log(\\\"I am adding the prosumer--- required it gets-\\\",_getApprovalCount(_unApprovedProsumerID));\\r\\n            //if yes then remove him from unapprove array and add him to approved prosumer array\\r\\n            unApprovedProsumers[_unApprovedProsumerID]._approved = true; //Set approved Flag = true\\r\\n            unApprovedProsumers[_unApprovedProsumerID]._prosumerID = ApprovedProsumers.length + 1; //Set Prosumer ID\\r\\n            isProsumer[unApprovedProsumers[_unApprovedProsumerID]._address] = true;\\r\\n            ApprovedProsumers.push(unApprovedProsumers[_unApprovedProsumerID]);\\r\\n            deleteElementFrom_UnApprovedProsumers(_unApprovedProsumerID);\\r\\n\\r\\n            /*Store the prosumers in the Maps*/\\r\\n            prosumerAddress[ApprovedProsumers.length] = ApprovedProsumers[\\r\\n                ApprovedProsumers.length - 1\\r\\n            ]._address;\\r\\n            prosumerID[ApprovedProsumers[ApprovedProsumers.length - 1]._address] = ApprovedProsumers\\r\\n                .length;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //--> 4. Disapprove Prosumer\\r\\n    function DisApproveProsumer_OwnerSpecific(uint256 _unApprovedProsumerID) public onlyOwner {\\r\\n        require(\\r\\n            _unApprovedProsumerID < unApprovedProsumers.length,\\r\\n            \\\"Invalid Unapproved Prosumer ID\\\"\\r\\n        );\\r\\n        require(\\r\\n            disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] == false,\\r\\n            \\\"Prosumer Already disapproved by you\\\"\\r\\n        );\\r\\n\\r\\n        disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] = true;\\r\\n\\r\\n        //If approved earlier then disapprove\\r\\n        if (disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender]) {\\r\\n            approved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] = false;\\r\\n        }\\r\\n\\r\\n        if (_getDisApprovalCount(_unApprovedProsumerID) > required) {\\r\\n            //if yes then remove him from unapprove array & don't store in approved array\\r\\n            deleteElementFrom_UnApprovedProsumers(_unApprovedProsumerID);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //-->5. Witdhraw Funds (Pending , send funds equally to all prosumer)  //Can only be called when Transaction array will be zero.\\r\\n    function withdrawFees() public onlyOwner {\\r\\n        require(Transaction.length == 0, \\\"First process all Transaction\\\"); //Otherwise all consumer money will be withdrawn to owners.\\r\\n        uint256 euqiBalance = address(this).balance / owners.length;\\r\\n\\r\\n        for (uint256 i = 0; i < owners.length; i++) {\\r\\n            (bool callSuccess, ) = payable(owners[i]).call{value: euqiBalance}(\\\"\\\");\\r\\n            require(callSuccess, \\\"Call Failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //--> HIDDEN FUNCTION (Only created for easy demonstration of Project), Not reccomended in Production\\r\\n    function removeProsumer() public onlyOwner {\\r\\n        address lastProsumer = prosumerAddress[ApprovedProsumers.length];\\r\\n        delete prosumerAddress[ApprovedProsumers.length];\\r\\n\\r\\n        //Remove last element from ApprovedProsumers Array\\r\\n        ApprovedProsumers.pop();\\r\\n\\r\\n        delete prosumerID[lastProsumer];\\r\\n    }\\r\\n\\r\\n    //-->^^^^^^^^^^^^^^^^^^^^^^^^ Process Trade ^^^^^^^^^^^^^^^^^^^^\\r\\n    function processTrade() public onlyOwner {\\r\\n        //Designed to process multiple Trade with a single click\\r\\n        require(Transaction.length != 0, \\\"No pending Transaction to execute\\\");\\r\\n        for (uint256 i = 0; i < Transaction.length; i++) {\\r\\n            _transfer(escrowAccount, Transaction[i]._consumer, Transaction[i]._consumerEnergyNeed);\\r\\n            (bool callSuccess, ) = payable(Transaction[i]._producer).call{\\r\\n                value: Transaction[i]._producerPaybleAmount\\r\\n            }(\\\"\\\"); //Transfering energy tokens to the producer\\r\\n            require(callSuccess, \\\"Call failed\\\");\\r\\n        }\\r\\n\\r\\n        delete Transaction; //Empty the pending Transaction array after all the transaction processed\\r\\n    }\\r\\n\\r\\n    function viewEscrowBalance() public view returns (uint256, uint256) {\\r\\n        return (address(this).balance, balanceOf(escrowAccount));\\r\\n    }\\r\\n\\r\\n    /********************PROSUMER FUNCTION**********************************/\\r\\n\\r\\n    function isRequested() internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < unApprovedProsumers.length; i++) {\\r\\n            if (msg.sender == unApprovedProsumers[i]._address) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function req_Registration(uint256 _aadharNo) public payable {\\r\\n        require(msg.value >= regFee, \\\"Registration Failed, Insufficient Fee\\\");\\r\\n        require(!isProsumer[msg.sender], \\\"You are already a Prosumer in the Network\\\");\\r\\n        require(!isRequested(), \\\"You have already requested for Registration\\\");\\r\\n\\r\\n        uint256 digitCheck = _aadharNo;\\r\\n        uint256 digits = 0;\\r\\n\\r\\n        while (digitCheck != 0) {\\r\\n            digitCheck /= 10;\\r\\n            digits++;\\r\\n        }\\r\\n\\r\\n        require(digits == 12, \\\"Enter a 12 digit Aadhar No.\\\");\\r\\n\\r\\n        //Create a prosumer object\\r\\n        prosumer memory _prosumer = prosumer({\\r\\n            _prosumerID: 0,\\r\\n            _address: msg.sender,\\r\\n            _aadharId: _aadharNo,\\r\\n            _approved: false,\\r\\n            _energyUnitPriceUSD: 0,\\r\\n            _energyUnitPriceMatic: 0,\\r\\n            _stakedEnergyBalance: 0\\r\\n        });\\r\\n\\r\\n        //Push the prosumer object to unApprovedProsumerArray\\r\\n        unApprovedProsumers.push(_prosumer);\\r\\n    }\\r\\n\\r\\n    /*-------------------Producer--------------------------------------------------------------*/\\r\\n\\r\\n    uint256 EnergyUnitPrice_usd;\\r\\n    uint256 EnergyUnitPrice_matic;\\r\\n\\r\\n    function setUnitPrice(uint256 price) internal onlyProsumer returns (uint256) {\\r\\n        /* New Approach - Take Price input as 1e10 */\\r\\n\\r\\n        EnergyUnitPrice_usd = price;\\r\\n        uint256 latestMaticPrice = uint(getLatestPrice());\\r\\n        // EnergyUnitPrice_matic = (price / latestMaticPrice) * 1e8;   (when we receive input as 1e18)\\r\\n        EnergyUnitPrice_matic = (price / latestMaticPrice) * 1e16;\\r\\n        /*------- 1e10/1e8 * 1e16 = 1e18 -----------------------*/\\r\\n        return EnergyUnitPrice_matic;\\r\\n    }\\r\\n\\r\\n    function advert(\\r\\n        uint256 unitEnergyPrice,\\r\\n        uint256 excessEnergyToken\\r\\n    ) public onlyProsumer returns (uint256) {\\r\\n        transfer(escrowAccount, excessEnergyToken);\\r\\n\\r\\n        uint256 ad_placerID = prosumerID[msg.sender];\\r\\n\\r\\n        ApprovedProsumers[ad_placerID - 1]._energyUnitPriceUSD = unitEnergyPrice;\\r\\n        ApprovedProsumers[ad_placerID - 1]._energyUnitPriceMatic = (setUnitPrice(unitEnergyPrice));\\r\\n        ApprovedProsumers[ad_placerID - 1]._stakedEnergyBalance = excessEnergyToken;\\r\\n\\r\\n        return ad_placerID;\\r\\n    }\\r\\n\\r\\n    function mySetUnitPrice_Matic() public view onlyProsumer returns (uint256) {\\r\\n        return ApprovedProsumers[prosumerID[msg.sender] - 1]._energyUnitPriceMatic;\\r\\n    }\\r\\n\\r\\n    function mySetUnitPrice_USD() public view onlyProsumer returns (uint256) {\\r\\n        return ApprovedProsumers[prosumerID[msg.sender] - 1]._energyUnitPriceUSD;\\r\\n    }\\r\\n\\r\\n    //mint  TODO:(Needs overriding, because now any user can access the default and mint function)\\r\\n    function produceEnergy(uint256 energyProduced) public onlyProsumer {\\r\\n        _mint(msg.sender, energyProduced);\\r\\n    }\\r\\n\\r\\n    //burn\\r\\n    function burnEnergy(uint256 energyBurned) public onlyProsumer {\\r\\n        _burn(msg.sender, energyBurned);\\r\\n    }\\r\\n\\r\\n    /*-------------------Consumer--------------------------------------------------------------*/\\r\\n\\r\\n    function bid(uint256 producerID, uint256 energy_need) public payable onlyProsumer {\\r\\n        uint256 MinPayableAmount = ApprovedProsumers[producerID - 1]._energyUnitPriceMatic *\\r\\n            energy_need;\\r\\n        require(msg.value >= MinPayableAmount, \\\"Didn't send enough Matic!\\\");\\r\\n        require(\\r\\n            energy_need <= ApprovedProsumers[producerID - 1]._stakedEnergyBalance,\\r\\n            \\\"Selected Producer do have enough Enough Energy Balance\\\"\\r\\n        );\\r\\n\\r\\n        Txn memory _txn = Txn({\\r\\n            _producer: prosumerAddress[producerID],\\r\\n            _consumer: msg.sender,\\r\\n            _producerID: producerID,\\r\\n            _consumerID: prosumerID[msg.sender],\\r\\n            _consumerEnergyNeed: energy_need,\\r\\n            _producerUnitPrice: ApprovedProsumers[producerID - 1]._energyUnitPriceMatic,\\r\\n            _producerPaybleAmount: MinPayableAmount\\r\\n        });\\r\\n\\r\\n        Transaction.push(_txn);\\r\\n\\r\\n        ApprovedProsumers[producerID - 1]._stakedEnergyBalance =\\r\\n            ApprovedProsumers[producerID - 1]._stakedEnergyBalance -\\r\\n            energy_need;\\r\\n    }\\r\\n\\r\\n    function viewMaticBalance() public view returns (uint256) {\\r\\n        return msg.sender.balance;\\r\\n    }\\r\\n\\r\\n    function viewEnergyBalance() public view returns (uint256) {\\r\\n        return balanceOf(msg.sender);\\r\\n    }\\r\\n\\r\\n    /****************Modifiers************/\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner[msg.sender], \\\"Not Owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyProsumer() {\\r\\n        require(isProsumer[msg.sender], \\\"Not Prosumer\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xce1efb588f968e94dc9f463afcc1c3a97d5c8f77bcf56ab2adb5202852b31b16\",\"license\":\"UNLICENSED\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract PriceConverter {\\r\\n    AggregatorV3Interface internal priceFeed;\\r\\n\\r\\n    /**\\r\\n     * Network: Polygon Mumbai\\r\\n     * Aggregator: MATIC/USD\\r\\n     * Address: 0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada\\r\\n     */\\r\\n    constructor() {\\r\\n        priceFeed = AggregatorV3Interface(0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the latest price\\r\\n     */\\r\\n    function getLatestPrice() public view returns (int) {\\r\\n        (\\r\\n            ,\\r\\n            /*uint80 roundID*/ int price /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\\r\\n            ,\\r\\n            ,\\r\\n\\r\\n        ) = priceFeed.latestRoundData();\\r\\n        return price;\\r\\n    }\\r\\n}\\r\\n\\r\\n// $ 1.14973259\\r\\n\",\"keccak256\":\"0x09d0ff105733ae98f85fd50568b9b9e97de5d6bfa3f67d5f44047cb18a5c2515\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003e5f38038062003e5f8339810160408190526200003491620003d1565b604080518082018252600b81526a22b732b93c902a37b5b2b760a91b6020808301918252835180850190945260048452631553925560e21b9084015281519192916200008391600391620002f8565b50805162000099906004906020840190620002f8565b5050600580546001600160a01b03191673d0d5e3db44de05e9f294bb0a3beeaf030de24ada179055508151620001085760405162461bcd60e51b815260206004820152600f60248201526e13dddb995c9cc814995c5d5a5c9959608a1b60448201526064015b60405180910390fd5b6000811180156200011c5750815160085411155b620001745760405162461bcd60e51b815260206004820152602160248201527f496e76616c6964207265717569726564206e756d626572206f66206f776e65726044820152607360f81b6064820152608401620000ff565b60005b8251811015620002db576000838281518110620001985762000198620004ab565b6020026020010151905060006001600160a01b0316816001600160a01b03161415620001f75760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b21037bbb732b960991b6044820152606401620000ff565b6001600160a01b03811660009081526007602052604090205460ff1615620002625760405162461bcd60e51b815260206004820152601360248201527f4f776e6572206973206e6f7420756e69717565000000000000000000000000006044820152606401620000ff565b6001600160a01b03166000818152600760205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b031916909117905580620002d281620004c1565b91505062000177565b5060085550600a80546001600160a01b0319163017905562000528565b8280546200030690620004eb565b90600052602060002090601f0160209004810192826200032a576000855562000375565b82601f106200034557805160ff191683800117855562000375565b8280016001018555821562000375579182015b828111156200037557825182559160200191906001019062000358565b506200038392915062000387565b5090565b5b8082111562000383576000815560010162000388565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620003cc57600080fd5b919050565b60008060408385031215620003e557600080fd5b82516001600160401b0380821115620003fd57600080fd5b818501915085601f8301126200041257600080fd5b81516020828211156200042957620004296200039e565b8160051b604051601f19603f830116810181811086821117156200045157620004516200039e565b6040529283528183019350848101820192898411156200047057600080fd5b948201945b8386101562000499576200048986620003b4565b8552948201949382019362000475565b97909101519698969750505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415620004e457634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806200050057607f821691505b602082108114156200052257634e487b7160e01b600052602260045260246000fd5b50919050565b61392780620005386000396000f3fe6080604052600436106103075760003560e01c80637fb400f91161019a578063a457c2d7116100e1578063e51431761161008a578063f4b1604511610064578063f4b1604514610928578063f85bae7814610963578063fdbd2e8b1461099e57600080fd5b8063e5143176146108de578063e706d568146108f3578063e814db591461090857600080fd5b8063dc8452cd116100bb578063dc8452cd1461086d578063dd62ed3e14610883578063e4f6ea88146108c957600080fd5b8063a457c2d71461080d578063a9059cbb1461082d578063c7a7275e1461084d57600080fd5b80638fff20f3116101435780639c01a6df1161011d5780639c01a6df146107ba5780639dc29fac146107da5780639ff34115146107fa57600080fd5b80638fff20f31461076f57806395d89b411461078557806396acb79a1461079a57600080fd5b80638e15f473116101745780638e15f4731461070f5780638ec90e5e146107245780638fac63711461073957600080fd5b80637fb400f9146106b957806383ae0367146106d95780638bda812f146106fb57600080fd5b80633628c3331161025e5780634ef8ab7711610207578063677f502e116101e1578063677f502e1461060357806370a08231146106635780637b78bc6b1461069957600080fd5b80634ef8ab771461057e578063598647f8146105db578063612536fc146105ee57600080fd5b8063476343ee11610238578063476343ee146105345780634ca46d19146105495780634ec9dd8d1461056957600080fd5b80633628c333146104b057806339509351146104f457806340c10f191461051457600080fd5b80630b6d83e2116102c057806323b872dd1161029a57806323b872dd146104445780632f54bf6e14610464578063313ce5671461049457600080fd5b80630b6d83e2146103f85780630e264f801461041a57806318160ddd1461042f57600080fd5b806306ed1f80116102f157806306ed1f801461038457806306fdde03146103a6578063095ea7b3146103c857600080fd5b80621cfdce1461030c578063025e7c271461034c575b600080fd5b34801561031857600080fd5b50610339610327366004613597565b600d6020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561035857600080fd5b5061036c6103673660046135b9565b6109ce565b6040516001600160a01b039091168152602001610343565b34801561039057600080fd5b506103996109f8565b60405161034391906135d2565b3480156103b257600080fd5b506103bb610c05565b604051610343919061365f565b3480156103d457600080fd5b506103e86103e33660046136b4565b610c97565b6040519015158152602001610343565b34801561040457600080fd5b506104186104133660046135b9565b610caf565b005b34801561042657600080fd5b50610339610d0a565b34801561043b57600080fd5b50600254610339565b34801561045057600080fd5b506103e861045f3660046136de565b610d9e565b34801561047057600080fd5b506103e861047f366004613597565b60076020526000908152604090205460ff1681565b3480156104a057600080fd5b5060405160128152602001610343565b3480156104bc57600080fd5b506104df600a546001600160a01b03166000908152602081905260409020544791565b60408051928352602083019190915201610343565b34801561050057600080fd5b506103e861050f3660046136b4565b610dc2565b34801561052057600080fd5b5061041861052f3660046136b4565b610e01565b34801561054057600080fd5b50610418610e0f565b34801561055557600080fd5b506104186105643660046135b9565b610f9b565b34801561057557600080fd5b50610339611234565b34801561058a57600080fd5b5061059e6105993660046135b9565b6112c8565b604080519788526001600160a01b039096166020880152948601939093529015156060850152608084015260a083015260c082015260e001610343565b6104186105e936600461371a565b611325565b3480156105fa57600080fd5b506103996116f9565b34801561060f57600080fd5b5061062361061e3660046135b9565b6117a6565b604080516001600160a01b039889168152979096166020880152948601939093526060850191909152608084015260a083015260c082015260e001610343565b34801561066f57600080fd5b5061033961067e366004613597565b6001600160a01b031660009081526020819052604090205490565b3480156106a557600080fd5b506103bb6106b4366004613597565b611802565b3480156106c557600080fd5b506104186106d43660046135b9565b611955565b3480156106e557600080fd5b5033600090815260208190526040902054610339565b34801561070757600080fd5b503331610339565b34801561071b57600080fd5b506103396119ad565b34801561073057600080fd5b50610418611a41565b34801561074557600080fd5b5061036c6107543660046135b9565b600c602052600090815260409020546001600160a01b031681565b34801561077b57600080fd5b5061033960095481565b34801561079157600080fd5b506103bb611c93565b3480156107a657600080fd5b506103396107b536600461371a565b611ca2565b3480156107c657600080fd5b5061059e6107d53660046135b9565b611dbd565b3480156107e657600080fd5b506104186107f53660046136b4565b611dcd565b6104186108083660046135b9565b611dd7565b34801561081957600080fd5b506103e86108283660046136b4565b61214b565b34801561083957600080fd5b506103e86108483660046136b4565b6121f5565b34801561085957600080fd5b506104186108683660046135b9565b612203565b34801561087957600080fd5b5061033960085481565b34801561088f57600080fd5b5061033961089e36600461373c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3480156108d557600080fd5b5061039961269c565b3480156108ea57600080fd5b5061041861289d565b3480156108ff57600080fd5b50610399612996565b34801561091457600080fd5b506104186109233660046135b9565b612a81565b34801561093457600080fd5b506103e861094336600461373c565b600f60209081526000928352604080842090915290825290205460ff1681565b34801561096f57600080fd5b506103e861097e36600461373c565b601060209081526000928352604080842090915290825290205460ff1681565b3480156109aa57600080fd5b506103e86109b9366004613597565b600b6020526000908152604090205460ff1681565b600681815481106109de57600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526007602052604090205460609060ff16610a4b5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b60448201526064015b60405180910390fd5b60115460009067ffffffffffffffff811115610a6957610a6961376f565b604051908082528060200260200182016040528015610ae557816020015b610ad26040518060e001604052806000815260200160006001600160a01b03168152602001600081526020016000151581526020016000815260200160008152602001600081525090565b815260200190600190039081610a875790505b50905060005b601154811015610bff57600f600060118381548110610b0c57610b0c613785565b6000918252602080832060016007909302018201546001600160a01b031684528381019490945260409283018220338352909352205460ff1615151415610bed5760118181548110610b6057610b60613785565b60009182526020918290206040805160e08101825260079093029091018054835260018101546001600160a01b031693830193909352600283015490820152600382015460ff161515606082015260048201546080820152600582015460a082015260069091015460c08201528251839083908110610be157610be1613785565b60200260200101819052505b80610bf7816137b1565b915050610aeb565b50905090565b606060038054610c14906137cc565b80601f0160208091040260200160405190810160405280929190818152602001828054610c40906137cc565b8015610c8d5780601f10610c6257610100808354040283529160200191610c8d565b820191906000526020600020905b815481529060010190602001808311610c7057829003601f168201915b5050505050905090565b600033610ca5818585612ad1565b5060019392505050565b336000908152600b602052604090205460ff16610cfd5760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610a42565b610d073382612c2a565b50565b336000908152600b602052604081205460ff16610d585760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610a42565b336000908152600d6020526040902054600e90610d7790600190613801565b81548110610d8757610d87613785565b906000526020600020906007020160040154905090565b600033610dac858285612ce9565b610db7858585612d7b565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190610ca59082908690610dfc908790613818565b612ad1565b610e0b8282612c2a565b5050565b3360009081526007602052604090205460ff16610e5a5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610a42565b60125415610eaa5760405162461bcd60e51b815260206004820152601d60248201527f46697273742070726f6365737320616c6c205472616e73616374696f6e0000006044820152606401610a42565b600654600090610eba9047613830565b905060005b600654811015610e0b57600060068281548110610ede57610ede613785565b60009182526020822001546040516001600160a01b039091169185919081818185875af1925050503d8060008114610f32576040519150601f19603f3d011682016040523d82523d6000602084013e610f37565b606091505b5050905080610f885760405162461bcd60e51b815260206004820152600b60248201527f43616c6c204661696c65640000000000000000000000000000000000000000006044820152606401610a42565b5080610f93816137b1565b915050610ebf565b3360009081526007602052604090205460ff16610fe65760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610a42565b60115481106110375760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420556e617070726f7665642050726f73756d657220494400006044820152606401610a42565b601060006011838154811061104e5761104e613785565b60009182526020808320600160079093020191909101546001600160a01b03168352828101939093526040918201812033825290925290205460ff16156110fd5760405162461bcd60e51b815260206004820152602360248201527f50726f73756d657220416c726561647920646973617070726f7665642062792060448201527f796f7500000000000000000000000000000000000000000000000000000000006064820152608401610a42565b6001601060006011848154811061111657611116613785565b60009182526020808320600792909202909101600101546001600160a01b0316835282810193909352604091820181203382529092528120805460ff1916921515929092179091556011805460109291908490811061117757611177613785565b60009182526020808320600160079093020191909101546001600160a01b03168352828101939093526040918201812033825290925290205460ff1615611219576000600f6000601184815481106111d1576111d1613785565b60009182526020808320600792909202909101600101546001600160a01b0316835282810193909352604091820181203382529092529020805460ff19169115159190911790555b60085461122582612f68565b1115610d0757610d0781613023565b336000908152600b602052604081205460ff166112825760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610a42565b336000908152600d6020526040902054600e906112a190600190613801565b815481106112b1576112b1613785565b906000526020600020906007020160050154905090565b600e81815481106112d857600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601549496506001600160a01b0390931694919360ff90911692919087565b336000908152600b602052604090205460ff166113735760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610a42565b600081600e611383600186613801565b8154811061139357611393613785565b9060005260206000209060070201600501546113af9190613852565b9050803410156114015760405162461bcd60e51b815260206004820152601960248201527f4469646e27742073656e6420656e6f756768204d6174696321000000000000006044820152606401610a42565b600e61140e600185613801565b8154811061141e5761141e613785565b9060005260206000209060070201600601548211156114a55760405162461bcd60e51b815260206004820152603660248201527f53656c65637465642050726f647563657220646f206861766520656e6f75676860448201527f20456e6f75676820456e657267792042616c616e6365000000000000000000006064820152608401610a42565b6040805160e0810182526000858152600c6020908152838220546001600160a01b03168352338184018190528385018890528252600d90529182205460608201526080810184905260a08101600e6114fe600188613801565b8154811061150e5761150e613785565b6000918252602080832060079283020160050154845292830186905260128054600180820183559190935284517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34449390920292830180546001600160a01b03199081166001600160a01b0394851617909155938501517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34458401805490951692169190911790925560408301517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344682015560608301517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344782015560808301517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344882015560a08301517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344982015560c08301517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344a909101559091508390600e906116959087613801565b815481106116a5576116a5613785565b9060005260206000209060070201600601546116c19190613801565b600e6116ce600187613801565b815481106116de576116de613785565b90600052602060002090600702016006018190555050505050565b6060600e805480602002602001604051908101604052809291908181526020016000905b8282101561179d5760008481526020908190206040805160e08101825260078602909201805483526001808201546001600160a01b031684860152600282015492840192909252600381015460ff161515606084015260048101546080840152600581015460a08401526006015460c0830152908352909201910161171d565b50505050905090565b601281815481106117b657600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b039586169750949093169491939092919087565b3360009081526007602052604090205460609060ff166118505760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610a42565b6001600160a01b0382166000908152600f6020908152604080832033845290915290205460ff16156118b557505060408051808201909152601181527f50726f73756d657220417070726f766564000000000000000000000000000000602082015290565b6001600160a01b038216600090815260106020908152604080832033845290915290205460ff161561191a57505060408051808201909152601481527f50726f73756d657220446973617070726f766564000000000000000000000000602082015290565b5060408051808201909152601981527f50726f73756d6572204e6f7420417070726f766564205965740000000000000060208201525b919050565b336000908152600b602052604090205460ff166119a35760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610a42565b610d07338261320d565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156119fe57600080fd5b505afa158015611a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a36919061388b565b509195945050505050565b3360009081526007602052604090205460ff16611a8c5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610a42565b601254611b015760405162461bcd60e51b815260206004820152602160248201527f4e6f2070656e64696e67205472616e73616374696f6e20746f2065786563757460448201527f65000000000000000000000000000000000000000000000000000000000000006064820152608401610a42565b60005b601254811015611c8457600a5460128054611b83926001600160a01b0316919084908110611b3457611b34613785565b906000526020600020906007020160010160009054906101000a90046001600160a01b031660128481548110611b6c57611b6c613785565b906000526020600020906007020160040154612d7b565b600060128281548110611b9857611b98613785565b6000918252602090912060079091020154601280546001600160a01b039092169184908110611bc957611bc9613785565b90600052602060002090600702016006015460405160006040518083038185875af1925050503d8060008114611c1b576040519150601f19603f3d011682016040523d82523d6000602084013e611c20565b606091505b5050905080611c715760405162461bcd60e51b815260206004820152600b60248201527f43616c6c206661696c65640000000000000000000000000000000000000000006044820152606401610a42565b5080611c7c816137b1565b915050611b04565b50611c9160126000613511565b565b606060048054610c14906137cc565b336000908152600b602052604081205460ff16611cf05760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610a42565b600a54611d06906001600160a01b0316836121f5565b50336000908152600d602052604090205483600e611d25600184613801565b81548110611d3557611d35613785565b906000526020600020906007020160040181905550611d538461336e565b600e611d60600184613801565b81548110611d7057611d70613785565b600091825260209091206005600790920201015582600e611d92600184613801565b81548110611da257611da2613785565b60009182526020909120600790910201600601559392505050565b601181815481106112d857600080fd5b610e0b828261320d565b600954341015611e4f5760405162461bcd60e51b815260206004820152602560248201527f526567697374726174696f6e204661696c65642c20496e73756666696369656e60448201527f74204665650000000000000000000000000000000000000000000000000000006064820152608401610a42565b336000908152600b602052604090205460ff1615611ed55760405162461bcd60e51b815260206004820152602960248201527f596f752061726520616c726561647920612050726f73756d657220696e20746860448201527f65204e6574776f726b00000000000000000000000000000000000000000000006064820152608401610a42565b611edd6133f4565b15611f505760405162461bcd60e51b815260206004820152602b60248201527f596f75206861766520616c72656164792072657175657374656420666f72205260448201527f6567697374726174696f6e0000000000000000000000000000000000000000006064820152608401610a42565b8060005b8115611f7957611f65600a83613830565b915080611f71816137b1565b915050611f54565b80600c14611fc95760405162461bcd60e51b815260206004820152601b60248201527f456e746572206120313220646967697420416164686172204e6f2e00000000006044820152606401610a42565b50506040805160e08101825260008082523360208301908152928201938452606082018181526080830182815260a0840183815260c0850184815260118054600181018255955294517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6860079095029485015594517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c69840180546001600160a01b0319166001600160a01b0390921691909117905594517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6a830155517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6b8201805460ff191691151591909117905592517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6c84015590517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6d830155517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6e90910155565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156121e85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610a42565b610db78286868403612ad1565b600033610ca5818585612d7b565b3360009081526007602052604090205460ff1661224e5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610a42565b601154811061229f5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420556e617070726f7665642050726f73756d657220494400006044820152606401610a42565b600f6000601183815481106122b6576122b6613785565b60009182526020808320600160079093020191909101546001600160a01b03168352828101939093526040918201812033825290925290205460ff161561233f5760405162461bcd60e51b815260206004820181905260248201527f50726f73756d657220416c726561647920617070726f76656420627920796f756044820152606401610a42565b6001600f60006011848154811061235857612358613785565b60009182526020808320600792909202909101600101546001600160a01b0316835282810193909352604091820181203382529092528120805460ff191692151592909217909155601180546010929190849081106123b9576123b9613785565b60009182526020808320600160079093020191909101546001600160a01b03168352828101939093526040918201812033825290925290205460ff161561245b576000601060006011848154811061241357612413613785565b60009182526020808320600792909202909101600101546001600160a01b0316835282810193909352604091820181203382529092529020805460ff19169115159190911790555b6008546124678261345b565b10610d075760016011828154811061248157612481613785565b60009182526020909120600790910201600301805460ff1916911515919091179055600e546124b1906001613818565b601182815481106124c4576124c4613785565b9060005260206000209060070201600001819055506001600b6000601184815481106124f2576124f2613785565b60009182526020808320600792909202909101600101546001600160a01b031683528201929092526040019020805460ff191691151591909117905560118054600e91908390811061254657612546613785565b600091825260208083208454600181810187559585529190932060079283029093018054919092029092019182558281015492820180546001600160a01b0319166001600160a01b039094169390931790925560028083015490820155600380830154908201805460ff909216151560ff1990921691909117905560048083015490820155600580830154908201556006918201549101556125e781613023565b600e80546125f790600190613801565b8154811061260757612607613785565b600091825260208083206001600790930201820154600e80548552600c9092526040842080546001600160a01b0319166001600160a01b03909216919091179055805492600d9290919061265b9085613801565b8154811061266b5761266b613785565b60009182526020808320600160079093020191909101546001600160a01b0316835282019290925260400190205550565b3360009081526007602052604090205460609060ff166126ea5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610a42565b60115460009067ffffffffffffffff8111156127085761270861376f565b60405190808252806020026020018201604052801561278457816020015b6127716040518060e001604052806000815260200160006001600160a01b03168152602001600081526020016000151581526020016000815260200160008152602001600081525090565b8152602001906001900390816127265790505b50905060005b601154811015610bff57600f6000601183815481106127ab576127ab613785565b60009182526020808320600160079093020191909101546001600160a01b03168352828101939093526040918201812033825290925290205460ff1661288b57601181815481106127fe576127fe613785565b60009182526020918290206040805160e08101825260079093029091018054835260018101546001600160a01b031693830193909352600283015490820152600382015460ff161515606082015260048201546080820152600582015460a082015260069091015460c0820152825183908390811061287f5761287f613785565b60200260200101819052505b80612895816137b1565b91505061278a565b3360009081526007602052604090205460ff166128e85760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610a42565b600e80546000908152600c6020526040902080546001600160a01b0319811690915581546001600160a01b03909116919080612926576129266138db565b600082815260208082206007600019909401938402018281556001810180546001600160a01b03191690556002810183905560038101805460ff191690556004810183905560058101839055600601829055919092556001600160a01b03929092168152600d9091526040812055565b3360009081526007602052604090205460609060ff166129e45760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610a42565b60118054604080516020808402820181019092528281529291906000908401821561179d5760008481526020908190206040805160e08101825260078602909201805483526001808201546001600160a01b031684860152600282015492840192909252600381015460ff161515606084015260048101546080840152600581015460a08401526006015460c0830152908352909201910161171d565b3360009081526007602052604090205460ff16612acc5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610a42565b600955565b6001600160a01b038316612b4c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610a42565b6001600160a01b038216612bc85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610a42565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038216612c805760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a42565b8060026000828254612c929190613818565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114612d755781811015612d685760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610a42565b612d758484848403612ad1565b50505050565b6001600160a01b038316612df75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610a42565b6001600160a01b038216612e735760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610a42565b6001600160a01b03831660009081526020819052604090205481811015612f025760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610a42565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3612d75565b6000805b60065481101561301d576010600060118581548110612f8d57612f8d613785565b60009182526020808320600160079093020191909101546001600160a01b0316835282019290925260400181206006805491929184908110612fd157612fd1613785565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff161561300b576130088183613818565b91505b80613015816137b1565b915050612f6c565b50919050565b3360009081526007602052604090205460ff1661306e5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610a42565b60115481106130bf5760405162461bcd60e51b815260206004820181905260248201527f496e76616c696420756e617070726f76656450726f73756d657220496e6465786044820152606401610a42565b805b6011546130d090600190613801565b8110156131a75760116130e4826001613818565b815481106130f4576130f4613785565b90600052602060002090600702016011828154811061311557613115613785565b60009182526020909120825460079092020190815560018083015490820180546001600160a01b0319166001600160a01b0390921691909117905560028083015490820155600380830154908201805460ff909216151560ff1990921691909117905560048083015490820155600580830154908201556006918201549101558061319f816137b1565b9150506130c1565b5060118054806131b9576131b96138db565b6000828152602081206007600019909301928302018181556001810180546001600160a01b03191690556002810182905560038101805460ff19169055600481018290556005810182905560060155905550565b6001600160a01b0382166132895760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610a42565b6001600160a01b038216600090815260208190526040902054818110156133185760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610a42565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612c1d565b336000908152600b602052604081205460ff166133bc5760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610a42565b601382905560006133cb6119ad565b90506133d78184613830565b6133e890662386f26fc10000613852565b60148190559392505050565b6000805b601154811015613453576011818154811061341557613415613785565b60009182526020909120600790910201600101546001600160a01b031633141561344157600191505090565b8061344b816137b1565b9150506133f8565b506000905090565b6000805b60065481101561301d57600f60006011858154811061348057613480613785565b60009182526020808320600160079093020191909101546001600160a01b03168352820192909252604001812060068054919291849081106134c4576134c4613785565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156134ff57816134fb816137b1565b9250505b80613509816137b1565b91505061345f565b5080546000825560070290600052602060002090810190610d0791905b8082111561357c5780546001600160a01b031990811682556001820180549091169055600060028201819055600382018190556004820181905560058201819055600682015560070161352e565b5090565b80356001600160a01b038116811461195057600080fd5b6000602082840312156135a957600080fd5b6135b282613580565b9392505050565b6000602082840312156135cb57600080fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b8281101561365257815180518552868101516001600160a01b03168786015285810151868601526060808201511515908601526080808201519086015260a0808201519086015260c0908101519085015260e090930192908501906001016135ef565b5091979650505050505050565b600060208083528351808285015260005b8181101561368c57858101830151858201604001528201613670565b8181111561369e576000604083870101525b50601f01601f1916929092016040019392505050565b600080604083850312156136c757600080fd5b6136d083613580565b946020939093013593505050565b6000806000606084860312156136f357600080fd5b6136fc84613580565b925061370a60208501613580565b9150604084013590509250925092565b6000806040838503121561372d57600080fd5b50508035926020909101359150565b6000806040838503121561374f57600080fd5b61375883613580565b915061376660208401613580565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156137c5576137c561379b565b5060010190565b600181811c908216806137e057607f821691505b6020821081141561301d57634e487b7160e01b600052602260045260246000fd5b6000828210156138135761381361379b565b500390565b6000821982111561382b5761382b61379b565b500190565b60008261384d57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561386c5761386c61379b565b500290565b805169ffffffffffffffffffff8116811461195057600080fd5b600080600080600060a086880312156138a357600080fd5b6138ac86613871565b94506020860151935060408601519250606086015191506138cf60808701613871565b90509295509295909350565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220bf557818fe03ee9d728d4f3fa52df091ff2947f6fe84abbadfcc95b736adb58964736f6c63430008080033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLatestPrice()": {
        "notice": "Returns the latest price"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 67,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 69,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 71,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2071,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 808,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "owners",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 812,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "isOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 814,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "required",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 816,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "regFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 818,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "escrowAccount",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 837,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "isProsumer",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 841,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "prosumerAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 845,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "prosumerID",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 849,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "ApprovedProsumers",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(prosumer)833_storage)dyn_storage"
      },
      {
        "astId": 855,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "approved",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 861,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "disapproved",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 865,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "unApprovedProsumers",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_struct(prosumer)833_storage)dyn_storage"
      },
      {
        "astId": 884,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "Transaction",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(Txn)880_storage)dyn_storage"
      },
      {
        "astId": 1777,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "EnergyUnitPrice_usd",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 1779,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "EnergyUnitPrice_matic",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Txn)880_storage)dyn_storage": {
        "base": "t_struct(Txn)880_storage",
        "encoding": "dynamic_array",
        "label": "struct EnergyTrade.Txn[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(prosumer)833_storage)dyn_storage": {
        "base": "t_struct(prosumer)833_storage",
        "encoding": "dynamic_array",
        "label": "struct EnergyTrade.prosumer[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Txn)880_storage": {
        "encoding": "inplace",
        "label": "struct EnergyTrade.Txn",
        "members": [
          {
            "astId": 867,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_producer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 869,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_consumer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 871,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_producerID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 873,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_consumerID",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 875,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_consumerEnergyNeed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 877,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_producerUnitPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 879,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_producerPaybleAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(prosumer)833_storage": {
        "encoding": "inplace",
        "label": "struct EnergyTrade.prosumer",
        "members": [
          {
            "astId": 820,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_prosumerID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 822,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_address",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 824,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_aadharId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 826,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_approved",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 828,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_energyUnitPriceUSD",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 830,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_energyUnitPriceMatic",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 832,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_stakedEnergyBalance",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
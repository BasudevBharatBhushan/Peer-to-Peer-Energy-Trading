{
  "address": "0x7380da0624A8219F54407A45eC14d44d4dc8fDD4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sellerID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "buyerID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "unitEnergyPriceUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitEnergyPriceMatic",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "boughtEnergyToken",
          "type": "uint256"
        }
      ],
      "name": "EnergyBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sellerID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitEnergyPriceUSD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitEnergyPriceMatic",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listedEnergyToken",
          "type": "uint256"
        }
      ],
      "name": "EnergyListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ApprovedProsumers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_prosumerID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_aadharId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_suspended",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceMatic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakedEnergyBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unApprovedProsumerID",
          "type": "uint256"
        }
      ],
      "name": "DisApproveProsumer_OwnerSpecific",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unApprovedProsumerID",
          "type": "uint256"
        }
      ],
      "name": "approveProsumer_OwnerSpecific",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "energyBurned",
          "type": "uint256"
        }
      ],
      "name": "burnEnergy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "producerID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "energy_need",
          "type": "uint256"
        }
      ],
      "name": "buyEnergy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "complainCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "complains",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_complainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_complainant",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_accused",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_complain",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_resolved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "disapprovalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "disapproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isProsumer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unitEnergyPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "excessEnergyToken",
          "type": "uint256"
        }
      ],
      "name": "listEnergy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxComplains",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mySetUnitPrice_Matic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mySetUnitPrice_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "energyProduced",
          "type": "uint256"
        }
      ],
      "name": "produceEnergy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prosumerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "prosumerID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_prosumerId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_complainBody",
          "type": "string"
        }
      ],
      "name": "raiseComplain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "regFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aadharNo",
          "type": "uint256"
        }
      ],
      "name": "req_Registration",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_regFee",
          "type": "uint256"
        }
      ],
      "name": "setRegFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_unapprovedProsumerAddress",
          "type": "address"
        }
      ],
      "name": "showApprovalStatus_OwnerSpecific",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "show_Approved_Prosumers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_prosumerID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_aadharId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "_suspended",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceMatic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakedEnergyBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct MultiSig.prosumer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "show_Unapproved_Prosumers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_prosumerID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_aadharId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "_suspended",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceMatic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakedEnergyBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct MultiSig.prosumer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_prosumerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_complainId",
          "type": "uint256"
        }
      ],
      "name": "suspendProsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "suspended",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "suspensionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unApprovedProsumers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_prosumerID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_aadharId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_suspended",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceMatic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakedEnergyBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_prosumerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_complainId",
          "type": "uint256"
        }
      ],
      "name": "unSuspendProsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unSuspended",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unSuspensionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewEnergyBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewEscrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewMaticBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b01750e13ed8ce25fea6decd15c7dc50496b09fe10e4f096669336231c70d6f",
  "receipt": {
    "to": null,
    "from": "0x85b3dB26424a88e7C1319E40a6324d64Acf1fFA2",
    "contractAddress": "0x7380da0624A8219F54407A45eC14d44d4dc8fDD4",
    "transactionIndex": 4,
    "gasUsed": "4424470",
    "logsBloom": "0x
    "blockHash": "0x9cfcd23966fee0f527ff82ea9bca71643b0367f968199975fa2d2e89e20a61b5",
    "transactionHash": "0x8b01750e13ed8ce25fea6decd15c7dc50496b09fe10e4f096669336231c70d6f",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 36395756,
        "transactionHash": "0x8b01750e13ed8ce25fea6decd15c7dc50496b09fe10e4f096669336231c70d6f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000085b3db26424a88e7c1319e40a6324d64acf1ffa2",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000205cdeadd8468c0000000000000000000000000000000000000000000000000c6c1a56d5834e4c000000000000000000000000000000000000000000001fcc19197e2e076adf770000000000000000000000000000000000000000000000000c4bbd7827ab07c0000000000000000000000000000000000000000000001fcc1939db0cb5432603",
        "logIndex": 32,
        "blockHash": "0x9cfcd23966fee0f527ff82ea9bca71643b0367f968199975fa2d2e89e20a61b5"
      }
    ],
    "blockNumber": 36395756,
    "cumulativeGasUsed": "4889288",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB2b5841DBeF766d4b521221732F9B618fCf34A87",
    [
      "0x85b3dB26424a88e7C1319E40a6324d64Acf1fFA2",
      "0xaA644EfCDFC1Adaf3CAb69Ae683638f4705F4C81",
      "0xB6E7F3234C709B6C96a60D14A85d41FADDd22FDA"
    ],
    2
  ],
  "numDeployments": 4,
  "solcInputHash": "84ab0b400f4a294f3dff3aae51a23711",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellerID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"buyerID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unitEnergyPriceUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitEnergyPriceMatic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtEnergyToken\",\"type\":\"uint256\"}],\"name\":\"EnergyBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sellerID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitEnergyPriceUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitEnergyPriceMatic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listedEnergyToken\",\"type\":\"uint256\"}],\"name\":\"EnergyListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ApprovedProsumers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_suspended\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unApprovedProsumerID\",\"type\":\"uint256\"}],\"name\":\"DisApproveProsumer_OwnerSpecific\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unApprovedProsumerID\",\"type\":\"uint256\"}],\"name\":\"approveProsumer_OwnerSpecific\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"energyBurned\",\"type\":\"uint256\"}],\"name\":\"burnEnergy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"producerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"energy_need\",\"type\":\"uint256\"}],\"name\":\"buyEnergy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"complainCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"complains\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_complainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_complainant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_accused\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_complain\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_resolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disapprovalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disapproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isProsumer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unitEnergyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"excessEnergyToken\",\"type\":\"uint256\"}],\"name\":\"listEnergy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxComplains\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mySetUnitPrice_Matic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mySetUnitPrice_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"energyProduced\",\"type\":\"uint256\"}],\"name\":\"produceEnergy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prosumerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prosumerID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_complainBody\",\"type\":\"string\"}],\"name\":\"raiseComplain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aadharNo\",\"type\":\"uint256\"}],\"name\":\"req_Registration\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_regFee\",\"type\":\"uint256\"}],\"name\":\"setRegFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unapprovedProsumerAddress\",\"type\":\"address\"}],\"name\":\"showApprovalStatus_OwnerSpecific\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"show_Approved_Prosumers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_suspended\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiSig.prosumer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"show_Unapproved_Prosumers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_suspended\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiSig.prosumer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_complainId\",\"type\":\"uint256\"}],\"name\":\"suspendProsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"suspended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"suspensionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unApprovedProsumers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_suspended\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_complainId\",\"type\":\"uint256\"}],\"name\":\"unSuspendProsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unSuspended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unSuspensionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewEnergyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewEscrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewMaticBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getTrustedForwarder()\":{\"returns\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"},\"returns\":{\"_0\":\"isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLatestPrice()\":{\"notice\":\"Returns the latest price\"},\"getTrustedForwarder()\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\"},\"isTrustedForwarder(address)\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnergyTrade.sol\":\"EnergyTrade\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@opengsn/contracts/src/ERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IERC2771Recipient.sol\\\";\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\\n *\\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\\n *\\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\\n *\\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\\n */\\nabstract contract ERC2771Recipient is IERC2771Recipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\\n     * @return forwarder The address of the Forwarder contract that is being used.\\n     */\\n    function getTrustedForwarder() public virtual view returns (address forwarder){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x77b3307c570c582969ea5466f296898ab9fea1f8b61b30f1c73345fe047a89a9\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\\n *\\n * @notice A contract must implement this interface in order to support relayed transaction.\\n *\\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\\n */\\nabstract contract IERC2771Recipient {\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @param forwarder The address of the Forwarder contract that is being used.\\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\\n     * @return sender The real sender of this call.\\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\\n     * Otherwise simply returns `msg.sender`.\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\\n     * @return data The real `msg.data` of this call.\\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\\n     * of the `msg.data` - so this method will strip those 20 bytes off.\\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n}\\n\",\"keccak256\":\"0xc762358681e3494519a5fff2f7e3f0f74f9c9f395f23b00cdfb45e0fb9ef8170\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/EnergyToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Energy_Token is ERC20 {\\n    /*\\n        Initial Supply is 50 ,- 50 WEI\\n        Initial supply 50e18\\n        or, 50*10**18\\n    */\\n    constructor() ERC20(\\\"Enery Token\\\", \\\"UNIT\\\") {}\\n}\\n\",\"keccak256\":\"0x24d14ddec5c363f3efab2fbb5fa79cd38dd94217bb1134d3d7bd621c40c5b842\",\"license\":\"UNLICENSED\"},\"contracts/EnergyTrade.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./EnergyToken.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\nimport \\\"./MultiSig.sol\\\";\\r\\n\\r\\ncontract EnergyTrade is Energy_Token, PriceConverter, MultiSig {\\r\\n    /*************Global Variables************/\\r\\n\\r\\n    address escrowAccount; //Address of the Deployed Smart Contract\\r\\n    uint256 EnergyUnitPrice_usd;\\r\\n    uint256 EnergyUnitPrice_matic;\\r\\n\\r\\n    /****************Constructor************/\\r\\n\\r\\n    constructor(\\r\\n        address forwarder,\\r\\n        address[] memory _owners,\\r\\n        uint256 _required\\r\\n    ) MultiSig(forwarder, _owners, _required) {\\r\\n        escrowAccount = address(this);\\r\\n    }\\r\\n\\r\\n    /****************Events**************************************/\\r\\n\\r\\n    event EnergyListed(\\r\\n        uint256 indexed sellerID,\\r\\n        uint256 unitEnergyPriceUSD,\\r\\n        uint256 unitEnergyPriceMatic,\\r\\n        uint256 listedEnergyToken\\r\\n    );\\r\\n\\r\\n    event EnergyBought(\\r\\n        uint256 indexed sellerID,\\r\\n        uint256 indexed buyerID,\\r\\n        uint256 indexed unitEnergyPriceUSD,\\r\\n        uint256 unitEnergyPriceMatic,\\r\\n        uint256 boughtEnergyToken\\r\\n    );\\r\\n\\r\\n    //Overriden GSN functions to resolve naming conflicts\\r\\n\\r\\n    function _msgSender() internal view override(Context, ERC2771Recipient) returns (address) {\\r\\n        return ERC2771Recipient._msgSender();\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view override(Context, ERC2771Recipient) returns (bytes calldata) {\\r\\n        return ERC2771Recipient._msgData();\\r\\n    }\\r\\n\\r\\n    /***************General View Functions***********************/\\r\\n\\r\\n    function viewEscrowBalance() public view returns (uint256, uint256) {\\r\\n        return (address(this).balance, balanceOf(escrowAccount));\\r\\n    }\\r\\n\\r\\n    function viewMaticBalance() public view returns (uint256) {\\r\\n        return msg.sender.balance;\\r\\n    }\\r\\n\\r\\n    function viewEnergyBalance() public view returns (uint256) {\\r\\n        return balanceOf(msg.sender);\\r\\n    }\\r\\n\\r\\n    /********************TRADING FUNCTION FOR PROSUMERS**********************************/\\r\\n\\r\\n    /*-------------------Producer--------------------------------------------------------------*/\\r\\n\\r\\n    //--> 1. Set Energy Unit Price for 1 Unit of Energy\\r\\n    function setUnitPrice(uint256 price) private onlyProsumer returns (uint256) {\\r\\n        /* Take Price input as 1e16 */\\r\\n\\r\\n        EnergyUnitPrice_usd = price;\\r\\n        uint256 latestMaticPrice = uint(getLatestPrice());\\r\\n        EnergyUnitPrice_matic = (price / latestMaticPrice) * 1e10;\\r\\n        /*------- 1e16/1e8 * 1e10 = 1e18 ----- ------------------*/\\r\\n\\r\\n        return EnergyUnitPrice_matic;\\r\\n    }\\r\\n\\r\\n    //--> 2. List Energy for Sale\\r\\n    function listEnergy(\\r\\n        uint256 unitEnergyPrice,\\r\\n        uint256 excessEnergyToken\\r\\n    ) public onlyProsumer isNotSuspended returns (uint256) {\\r\\n        require(\\r\\n            ApprovedProsumers[prosumerID[msg.sender] - 1]._stakedEnergyBalance == 0,\\r\\n            \\\"You have Already Staked Energy\\\"\\r\\n        );\\r\\n\\r\\n        uint256 ad_placerID = prosumerID[msg.sender];\\r\\n\\r\\n        ApprovedProsumers[ad_placerID - 1]._energyUnitPriceUSD = unitEnergyPrice;\\r\\n        ApprovedProsumers[ad_placerID - 1]._energyUnitPriceMatic = (setUnitPrice(unitEnergyPrice));\\r\\n        ApprovedProsumers[ad_placerID - 1]._stakedEnergyBalance = excessEnergyToken;\\r\\n\\r\\n        transfer(escrowAccount, excessEnergyToken);\\r\\n\\r\\n        emit EnergyListed(\\r\\n            ad_placerID,\\r\\n            ApprovedProsumers[ad_placerID - 1]._energyUnitPriceUSD,\\r\\n            ApprovedProsumers[ad_placerID - 1]._energyUnitPriceMatic,\\r\\n            excessEnergyToken\\r\\n        );\\r\\n\\r\\n        return ad_placerID;\\r\\n    }\\r\\n\\r\\n    //--> 3. Set Unit Price for 1 Unit of Energy in Matic\\r\\n    function mySetUnitPrice_Matic() public view onlyProsumer returns (uint256) {\\r\\n        return ApprovedProsumers[prosumerID[msg.sender] - 1]._energyUnitPriceMatic;\\r\\n    }\\r\\n\\r\\n    //--> 4. Set Unit Price for 1 Unit of Energy in USD\\r\\n    function mySetUnitPrice_USD() public view onlyProsumer returns (uint256) {\\r\\n        return ApprovedProsumers[prosumerID[msg.sender] - 1]._energyUnitPriceUSD;\\r\\n    }\\r\\n\\r\\n    //--> 5. Mint Energy Token\\r\\n    function produceEnergy(uint256 energyProduced) public onlyProsumer isNotSuspended {\\r\\n        _mint(msg.sender, energyProduced);\\r\\n    }\\r\\n\\r\\n    //--> 6. Burn Energy Token\\r\\n    function burnEnergy(uint256 energyBurned) public onlyProsumer isNotSuspended {\\r\\n        _burn(msg.sender, energyBurned);\\r\\n    }\\r\\n\\r\\n    /*-------------------Consumer--------------------------------------------------------------*/\\r\\n\\r\\n    //--> 1. Buy Energy\\r\\n    function buyEnergy(\\r\\n        uint256 producerID,\\r\\n        uint256 energy_need\\r\\n    ) public payable onlyProsumer isNotSuspended {\\r\\n        uint256 MinPayableAmount = ApprovedProsumers[producerID - 1]._energyUnitPriceMatic *\\r\\n            energy_need;\\r\\n        require(msg.value >= MinPayableAmount, \\\"Didn't send enough Matic!\\\");\\r\\n        require(\\r\\n            energy_need <= ApprovedProsumers[producerID - 1]._stakedEnergyBalance,\\r\\n            \\\"Selected Producer do have enough Enough Energy Balance\\\"\\r\\n        );\\r\\n\\r\\n        // State Change Before Transfer to avoid Re-entrancy Attack\\r\\n        ApprovedProsumers[producerID - 1]._stakedEnergyBalance =\\r\\n            ApprovedProsumers[producerID - 1]._stakedEnergyBalance -\\r\\n            energy_need;\\r\\n\\r\\n        //Transfer Energy to Consumer\\r\\n        _transfer(escrowAccount, msg.sender, energy_need);\\r\\n\\r\\n        //Transfer Matic to Producer\\r\\n        (bool callSuccess, ) = payable(prosumerAddress[producerID]).call{value: MinPayableAmount}(\\r\\n            \\\"\\\"\\r\\n        );\\r\\n\\r\\n        require(callSuccess, \\\"call failed\\\");\\r\\n\\r\\n        emit EnergyBought(\\r\\n            producerID,\\r\\n            prosumerID[msg.sender],\\r\\n            ApprovedProsumers[producerID - 1]._energyUnitPriceUSD,\\r\\n            ApprovedProsumers[producerID - 1]._energyUnitPriceMatic,\\r\\n            energy_need\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /****************Modifiers************/\\r\\n\\r\\n    modifier onlyProsumer() {\\r\\n        require(isProsumer[msg.sender], \\\"Not Prosumer\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isNotSuspended() {\\r\\n        require(!ApprovedProsumers[prosumerID[msg.sender] - 1]._suspended, \\\"You are Suspended\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x35465caf19e051b530b7c9a93a83d9fc0b147a947c258b628c1a0f046aedc5c2\",\"license\":\"UNLICENSED\"},\"contracts/MultiSig.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.7;\\nimport \\\"@opengsn/contracts/src/ERC2771Recipient.sol\\\";\\n\\n//GSN ENABLED CONTRACT\\n\\ncontract MultiSig is ERC2771Recipient {\\n    /*************Global Variables************/\\n\\n    uint256 public required;\\n    uint256 public regFee;\\n\\n    address[] public owners;\\n\\n    mapping(address => bool) public isOwner;\\n    mapping(address => mapping(address => bool)) public approved; //address1 = unapprovedProsumer address, address2 = address Of Owner, bool\\n    mapping(address => mapping(address => bool)) public disapproved; //address1 = unapprovedProsumer address, address2 = address Of Owner, bool\\n    mapping(address => mapping(address => bool)) public suspended; //address1 = unapprovedProsumer address, address2 = address Of Owner, bool\\n    mapping(address => mapping(address => bool)) public unSuspended; //address1 = unapprovedProsumer address, address2 = address Of Owner, bool\\n\\n    /*-------Prosumer Variables-------------------------*/\\n    struct prosumer {\\n        uint256 _prosumerID;\\n        address _address;\\n        uint256 _aadharId;\\n        bool _approved;\\n        bool _suspended;\\n        uint256 _energyUnitPriceUSD;\\n        uint256 _energyUnitPriceMatic;\\n        uint256 _stakedEnergyBalance;\\n    }\\n\\n    prosumer[] public ApprovedProsumers;\\n    prosumer[] public unApprovedProsumers;\\n\\n    mapping(address => bool) public isProsumer;\\n    mapping(uint256 => address) public prosumerAddress;\\n    mapping(address => uint256) public prosumerID;\\n\\n    //Prosumer Stats\\n    mapping(address => uint256) public approvalCount;\\n    mapping(address => uint256) public disapprovalCount;\\n    mapping(address => uint256) public suspensionCount;\\n    mapping(address => uint256) public unSuspensionCount;\\n\\n    /****************Complain**************************************/\\n    struct Complain {\\n        uint256 _complainID;\\n        uint256 _complainant;\\n        uint256 _accused;\\n        string _complain;\\n        bool _resolved;\\n    }\\n\\n    uint256 public complainCount;\\n    uint256 public maxComplains = 10;\\n    Complain[] public complains;\\n\\n    /****************Constructor************/\\n    constructor(address forwarder, address[] memory _owners, uint _required) {\\n        //Set the trusted forwarder\\n        _setTrustedForwarder(forwarder);\\n\\n        //We will pass multiple owners & set a particular requirement number of apporvals needed\\n        require(_owners.length > 0, \\\"Owners Required\\\");\\n        require(_required > 0 && _required <= _owners.length, \\\"Invalid required number of owners\\\");\\n\\n        for (uint i; i < _owners.length; i++) {\\n            address owner = _owners[i];\\n            require(owner != address(0), \\\"invalid owner\\\");\\n            require(!isOwner[owner], \\\"Owner is not unique\\\");\\n\\n            isOwner[owner] = true;\\n            owners.push(owner);\\n        }\\n\\n        required = _required;\\n    }\\n\\n    string public versionRecipient = \\\"3.0.0\\\";\\n\\n    // Request for Registration as Prosumer\\n\\n    /**Unverified User Function***/\\n\\n    //Internal Function\\n    function isRequested() private view returns (bool) {\\n        for (uint256 i = 0; i < unApprovedProsumers.length; i++) {\\n            if (msg.sender == unApprovedProsumers[i]._address) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    //-->1. Register as Prosumer\\n    function req_Registration(uint256 _aadharNo) public payable {\\n        require(!isOwner[msg.sender], \\\"You are an Owner\\\");\\n        require(msg.value >= regFee, \\\"Registration Failed, Insufficient Fee\\\");\\n        require(!isProsumer[msg.sender], \\\"You are already a Prosumer in the Network\\\");\\n        require(!isRequested(), \\\"You have already requested for Registration\\\");\\n\\n        uint256 digitCheck = _aadharNo;\\n        uint256 digits = 0;\\n\\n        while (digitCheck != 0) {\\n            digitCheck /= 10;\\n            digits++;\\n        }\\n\\n        require(digits == 12, \\\"Enter a 12 digit Aadhar No.\\\");\\n\\n        //Create a prosumer object\\n        prosumer memory _prosumer = prosumer({\\n            _prosumerID: 0,\\n            _address: msg.sender,\\n            _aadharId: _aadharNo,\\n            _approved: false,\\n            _suspended: false,\\n            _energyUnitPriceUSD: 0,\\n            _energyUnitPriceMatic: 0,\\n            _stakedEnergyBalance: 0\\n        });\\n\\n        //Push the prosumer object to unApprovedProsumerArray\\n        unApprovedProsumers.push(_prosumer);\\n    }\\n\\n    function raiseComplain(uint256 _prosumerId, string memory _complainBody) public {\\n        require(isProsumer[_msgSender()], \\\"You not a Prosumer\\\");\\n        require(isProsumer[prosumerAddress[_prosumerId]], \\\"Accused not a Prosumer\\\");\\n        require(\\n            !suspended[prosumerAddress[_prosumerId]][_msgSender()],\\n            \\\"Accused Prosumer is Suspended\\\"\\n        );\\n        require(!suspended[_msgSender()][prosumerAddress[_prosumerId]], \\\"You are Suspended\\\");\\n        require(\\n            !disapproved[prosumerAddress[_prosumerId]][_msgSender()],\\n            \\\"Prosumer is Disapproved\\\"\\n        );\\n        require(!disapproved[_msgSender()][prosumerAddress[_prosumerId]], \\\"You are Disapproved\\\");\\n\\n        Complain memory _complain = Complain({\\n            _complainID: complains.length + 1,\\n            _complainant: prosumerID[_msgSender()],\\n            _accused: _prosumerId,\\n            _complain: _complainBody,\\n            _resolved: false\\n        });\\n\\n        if (complains.length < maxComplains) {\\n            complains.push(_complain);\\n        } else {\\n            complains[complainCount % maxComplains] = _complain;\\n        }\\n\\n        if (complainCount < maxComplains) {\\n            complainCount++;\\n        }\\n    }\\n\\n    /***************Owner Functions***********************/\\n\\n    //--> 1. Set Registration Fee\\n\\n    function setRegFee(uint256 _regFee) public onlyOwner {\\n        regFee = _regFee;\\n    }\\n\\n    //--> 2. Verify Details of Unapproved Prosumer\\n\\n    //-->2.1 Internal Function\\n\\n    function deleteElementFrom_UnApprovedProsumers(\\n        uint256 _unApprovedProsumerID\\n    ) private onlyOwner {\\n        require(\\n            _unApprovedProsumerID < unApprovedProsumers.length,\\n            \\\"Invalid unapprovedProsumer Index\\\"\\n        );\\n\\n        for (uint256 i = _unApprovedProsumerID; i < unApprovedProsumers.length - 1; i++) {\\n            unApprovedProsumers[i] = unApprovedProsumers[i + 1];\\n        }\\n        unApprovedProsumers.pop();\\n    }\\n\\n    /*-----------------------------------------------------------------------------------------------*/\\n\\n    //-->2.2 Show all Approved or Unapproved Prosumer\\n\\n    function show_Unapproved_Prosumers() public view onlyOwner returns (prosumer[] memory) {\\n        return unApprovedProsumers;\\n    }\\n\\n    function show_Approved_Prosumers() public view returns (prosumer[] memory) {\\n        //Public Function anybody can call\\n        return ApprovedProsumers;\\n    }\\n\\n    //-->2.3 Approval Status [Owner Specific]\\n\\n    function showApprovalStatus_OwnerSpecific(\\n        address _unapprovedProsumerAddress\\n    ) public view onlyOwner returns (string memory) {\\n        if (approved[_unapprovedProsumerAddress][_msgSender()]) {\\n            return (\\\"Prosumer Approved\\\");\\n        } else if (disapproved[_unapprovedProsumerAddress][_msgSender()]) {\\n            return (\\\"Prosumer Disapproved\\\");\\n        } else {\\n            return (\\\"Prosumer Not Verified Yet\\\");\\n        }\\n    }\\n\\n    /*** Admission of Prosumer ***/\\n\\n    //--> 3. Approve Prosumer\\n\\n    function approveProsumer_OwnerSpecific(uint256 _unApprovedProsumerID) public onlyOwner {\\n        require(\\n            _unApprovedProsumerID < unApprovedProsumers.length,\\n            \\\"Invalid Unapproved Prosumer ID\\\"\\n        );\\n        require(\\n            approved[unApprovedProsumers[_unApprovedProsumerID]._address][_msgSender()] == false,\\n            \\\"Prosumer Already approved by you\\\"\\n        );\\n\\n        approved[unApprovedProsumers[_unApprovedProsumerID]._address][_msgSender()] = true;\\n\\n        //If disapproved earlier then wants to approve\\n        if (disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][_msgSender()]) {\\n            disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][_msgSender()] = false;\\n            disapprovalCount[unApprovedProsumers[_unApprovedProsumerID]._address]--;\\n        }\\n\\n        uint256 getApprovalCount = approvalCount[\\n            unApprovedProsumers[_unApprovedProsumerID]._address\\n        ]++;\\n\\n        //check if approval > required\\n        if (getApprovalCount > required) {\\n            //if yes then remove him from unapprove array and add him to approved prosumer array\\n            unApprovedProsumers[_unApprovedProsumerID]._approved = true; //Set approved Flag = true\\n            unApprovedProsumers[_unApprovedProsumerID]._prosumerID = ApprovedProsumers.length + 1; //Set Prosumer ID\\n            isProsumer[unApprovedProsumers[_unApprovedProsumerID]._address] = true;\\n            ApprovedProsumers.push(unApprovedProsumers[_unApprovedProsumerID]);\\n            deleteElementFrom_UnApprovedProsumers(_unApprovedProsumerID);\\n\\n            /*Store the prosumers in the Maps*/\\n            prosumerAddress[ApprovedProsumers.length] = ApprovedProsumers[\\n                ApprovedProsumers.length - 1\\n            ]._address;\\n            prosumerID[ApprovedProsumers[ApprovedProsumers.length - 1]._address] = ApprovedProsumers\\n                .length;\\n        }\\n    }\\n\\n    //--> 4. Disapprove Prosumer\\n    function DisApproveProsumer_OwnerSpecific(uint256 _unApprovedProsumerID) public onlyOwner {\\n        require(\\n            _unApprovedProsumerID < unApprovedProsumers.length,\\n            \\\"Invalid Unapproved Prosumer ID\\\"\\n        );\\n        require(\\n            disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][_msgSender()] == false,\\n            \\\"Prosumer Already disapproved by you\\\"\\n        );\\n\\n        disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][_msgSender()] = true;\\n\\n        //If approved earlier then disapprove\\n        if (disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][_msgSender()]) {\\n            approved[unApprovedProsumers[_unApprovedProsumerID]._address][_msgSender()] = false;\\n            approvalCount[unApprovedProsumers[_unApprovedProsumerID]._address]--;\\n        }\\n\\n        uint256 getDisApprovalCount = disapprovalCount[\\n            unApprovedProsumers[_unApprovedProsumerID]._address\\n        ]++;\\n\\n        //check if disapproval > required\\n        if (getDisApprovalCount > required) {\\n            //if yes then remove him from unapprove array & don't store in approved array\\n            deleteElementFrom_UnApprovedProsumers(_unApprovedProsumerID);\\n            delete disapprovalCount[unApprovedProsumers[_unApprovedProsumerID]._address];\\n            delete approvalCount[unApprovedProsumers[_unApprovedProsumerID]._address];\\n        }\\n    }\\n\\n    /*** Suspension of Prosumer ***/\\n\\n    //--> 5. Suspend Prosumer\\n    function suspendProsumer(uint256 _prosumerId, uint256 _complainId) public onlyOwner {\\n        address getProsumerAddress = prosumerAddress[_prosumerId];\\n        require(isProsumer[getProsumerAddress], \\\"Not a Prosumer\\\");\\n        require(!suspended[getProsumerAddress][_msgSender()], \\\"Already Suspended\\\");\\n\\n        suspended[getProsumerAddress][_msgSender()] = true;\\n\\n        //If unsuspended earlier then suspend\\n        if (unSuspended[getProsumerAddress][_msgSender()]) {\\n            unSuspended[getProsumerAddress][_msgSender()] = false;\\n            unSuspensionCount[getProsumerAddress]--;\\n        }\\n\\n        uint256 getSuspensionCount = suspensionCount[getProsumerAddress]++;\\n\\n        //check if suspension > required\\n        if (getSuspensionCount > required) {\\n            //if yes then remove him from unapprove array & don't store in approved array\\n            delete suspensionCount[getProsumerAddress];\\n            ApprovedProsumers[_prosumerId - 1]._suspended = true;\\n            complains[_complainId - 1]._resolved = true;\\n        }\\n    }\\n\\n    //--> 6. Unsuspend Prosumer\\n    function unSuspendProsumer(uint256 _prosumerId, uint256 _complainId) public onlyOwner {\\n        require(isProsumer[prosumerAddress[_prosumerId]], \\\"Not a Prosumer\\\");\\n        require(!unSuspended[prosumerAddress[_prosumerId]][_msgSender()], \\\"Already Unsuspended\\\");\\n\\n        address prosumerToUnsuspend = prosumerAddress[_prosumerId];\\n\\n        unSuspended[prosumerToUnsuspend][_msgSender()] = true;\\n\\n        // If suspended earlier then unsuspend\\n        if (suspended[prosumerToUnsuspend][_msgSender()]) {\\n            suspended[prosumerToUnsuspend][_msgSender()] = false;\\n            suspensionCount[prosumerToUnsuspend]--;\\n        }\\n\\n        uint256 getUnSuspensionCount = unSuspensionCount[prosumerToUnsuspend]++;\\n\\n        // Check if unsuspension > required\\n        if (getUnSuspensionCount > required) {\\n            // If yes, then remove him from unapprove array & don't store in the approved array\\n            delete unSuspensionCount[prosumerToUnsuspend];\\n            delete suspensionCount[prosumerToUnsuspend];\\n            ApprovedProsumers[_prosumerId - 1]._suspended = false;\\n            complains[_complainId - 1]._resolved = true;\\n        }\\n    }\\n\\n    //-->6.3. Witdhraw Funds (Pending , send funds equally to all prosumer)  //Can only be called when Transaction array will be zero.\\n    function withdrawFees() public onlyOwner {\\n        uint256 euqiBalance = address(this).balance / owners.length;\\n\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            (bool callSuccess, ) = payable(owners[i]).call{value: euqiBalance}(\\\"\\\");\\n            require(callSuccess, \\\"Call Failed\\\");\\n        }\\n    }\\n\\n    //6.4. Transfer Ownership\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        for (uint256 i = 0; i < owners.length; i++) {\\n            if (owners[i] == _msgSender()) {\\n                owners[i] = newOwner;\\n                break;\\n            }\\n        }\\n    }\\n\\n    modifier onlyOwner() {\\n        require(isOwner[_msgSender()], \\\"Not Owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x85e42e2abe8aa319279b7d159eb374af7eb76b8ed595a66bc2e9cca12ab3987a\",\"license\":\"UNLICENSED\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract PriceConverter {\\r\\n    AggregatorV3Interface internal priceFeed;\\r\\n\\r\\n    /**\\r\\n     * Network: Polygon Mumbai\\r\\n     * Aggregator: MATIC/USD\\r\\n     * Address: 0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada\\r\\n     */\\r\\n    constructor() {\\r\\n        priceFeed = AggregatorV3Interface(0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the latest price\\r\\n     */\\r\\n    function getLatestPrice() public view returns (int) {\\r\\n        (\\r\\n            ,\\r\\n            /*uint80 roundID*/ int price /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\\r\\n            ,\\r\\n            ,\\r\\n\\r\\n        ) = priceFeed.latestRoundData();\\r\\n        return price;\\r\\n    }\\r\\n}\\r\\n\\r\\n// $ 1.14973259\\r\\n\",\"keccak256\":\"0x09d0ff105733ae98f85fd50568b9b9e97de5d6bfa3f67d5f44047cb18a5c2515\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600a60195560c060405260056080819052640332e302e360dc1b60a09081526200002d91601b919062000354565b503480156200003b57600080fd5b5060405162004e5938038062004e598339810160408190526200005e916200042d565b604080518082018252600b81526a22b732b93c902a37b5b2b760a91b6020808301918252835180850190945260048452631553925560e21b9084015281518693869386939092620000b29160039162000354565b508051620000c890600490602084019062000354565b5050600580546001600160a01b03191673d0d5e3db44de05e9f294bb0a3beeaf030de24ada179055506200011883600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000825111620001615760405162461bcd60e51b815260206004820152600f60248201526e13dddb995c9cc814995c5d5a5c9959608a1b60448201526064015b60405180910390fd5b60008111801562000173575081518111155b620001cb5760405162461bcd60e51b815260206004820152602160248201527f496e76616c6964207265717569726564206e756d626572206f66206f776e65726044820152607360f81b606482015260840162000158565b60005b825181101562000332576000838281518110620001ef57620001ef6200051f565b6020026020010151905060006001600160a01b0316816001600160a01b031614156200024e5760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b21037bbb732b960991b604482015260640162000158565b6001600160a01b0381166000908152600a602052604090205460ff1615620002b95760405162461bcd60e51b815260206004820152601360248201527f4f776e6572206973206e6f7420756e6971756500000000000000000000000000604482015260640162000158565b6001600160a01b03166000818152600a60205260408120805460ff191660019081179091556009805491820181559091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b031916909117905580620003298162000535565b915050620001ce565b506007555050601c80546001600160a01b03191630179055506200059c915050565b82805462000362906200055f565b90600052602060002090601f016020900481019282620003865760008555620003d1565b82601f10620003a157805160ff1916838001178555620003d1565b82800160010185558215620003d1579182015b82811115620003d1578251825591602001919060010190620003b4565b50620003df929150620003e3565b5090565b5b80821115620003df5760008155600101620003e4565b80516001600160a01b03811681146200041257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156200044357600080fd5b6200044e84620003fa565b602085810151919450906001600160401b03808211156200046e57600080fd5b818701915087601f8301126200048357600080fd5b81518181111562000498576200049862000417565b8060051b604051601f19603f83011681018181108582111715620004c057620004c062000417565b60405291825284820192508381018501918a831115620004df57600080fd5b938501935b828510156200050857620004f885620003fa565b84529385019392850192620004e4565b809750505050505050604084015190509250925092565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200055857634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806200057457607f821691505b602082108114156200059657634e487b7160e01b600052602260045260246000fd5b50919050565b6148ad80620005ac6000396000f3fe60806040526004361061036a5760003560e01c80637b78bc6b116101c6578063c7a7275e116100f7578063e706d56811610095578063f2fde38b1161006f578063f2fde38b14610ae8578063f4b1604514610b08578063f85bae7814610b43578063fdbd2e8b14610b7e57600080fd5b8063e706d56814610a93578063e7e4f9d914610aa8578063e814db5914610ac857600080fd5b8063cdb6d52d116100d1578063cdb6d52d14610a06578063ce1b815f14610a19578063dc8452cd14610a37578063dd62ed3e14610a4d57600080fd5b8063c7a7275e146109a6578063c8a9fb5e146109c6578063c8b6ba49146109e657600080fd5b806390f8ba3c116101645780639c01a6df1161013e5780639c01a6df146109335780639ff3411514610953578063a457c2d714610966578063a9059cbb1461098657600080fd5b806390f8ba3c146108c457806395d89b41146108f15780639a9ddd161461090657600080fd5b80638bda812f116101a05780638bda812f1461084f5780638e15f473146108635780638fac6371146108785780638fff20f3146108ae57600080fd5b80637b78bc6b146107ed5780637fb400f91461080d57806383ae03671461082d57600080fd5b8063476343ee116102a0578063572b6c051161023e57806366cc771f1161021857806366cc771f1461073957806370a082311461076657806373de8ce81461079c57806375ae81b3146107b257600080fd5b8063572b6c05146106ad5780635f81b606146106dc578063612536fc1461071757600080fd5b80634ea30b2f1161027a5780634ea30b2f146105ec5780634ec9dd8d1461061d5780634ef8ab771461063257806350a7ac251461069757600080fd5b8063476343ee146105a2578063486ff0cd146105b75780634ca46d19146105cc57600080fd5b806318160ddd1161030d578063313ce567116102e7578063313ce567146105025780633628c3331461051e578063395093511461056257806340cb33421461058257600080fd5b806318160ddd1461049d57806323b872dd146104b25780632f54bf6e146104d257600080fd5b8063095ea7b311610349578063095ea7b3146104095780630b6d83e2146104395780630e264f801461045b578063143859eb1461047057600080fd5b80621cfdce1461036f578063025e7c27146103af57806306fdde03146103e7575b600080fd5b34801561037b57600080fd5b5061039c61038a3660046143d8565b60136020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156103bb57600080fd5b506103cf6103ca3660046143fa565b610bae565b6040516001600160a01b0390911681526020016103a6565b3480156103f357600080fd5b506103fc610bd8565b6040516103a69190614460565b34801561041557600080fd5b50610429610424366004614473565b610c6a565b60405190151581526020016103a6565b34801561044557600080fd5b506104596104543660046143fa565b610c8c565b005b34801561046757600080fd5b5061039c610d7b565b34801561047c57600080fd5b5061039c61048b3660046143d8565b60176020526000908152604090205481565b3480156104a957600080fd5b5060025461039c565b3480156104be57600080fd5b506104296104cd36600461449d565b610e0f565b3480156104de57600080fd5b506104296104ed3660046143d8565b600a6020526000908152604090205460ff1681565b34801561050e57600080fd5b50604051601281526020016103a6565b34801561052a57600080fd5b5061054d601c546001600160a01b03166000908152602081905260409020544791565b604080519283526020830191909152016103a6565b34801561056e57600080fd5b5061042961057d366004614473565b610e3d565b34801561058e57600080fd5b5061045961059d3660046144d9565b610e8f565b3480156105ae57600080fd5b506104596111ec565b3480156105c357600080fd5b506103fc611342565b3480156105d857600080fd5b506104596105e73660046143fa565b6113d0565b3480156105f857600080fd5b5061060c6106073660046143fa565b61182d565b6040516103a69594939291906144fb565b34801561062957600080fd5b5061039c6118fe565b34801561063e57600080fd5b5061065261064d3660046143fa565b611992565b604080519889526001600160a01b0390971660208901529587019490945291151560608601521515608085015260a084015260c083015260e0820152610100016103a6565b3480156106a357600080fd5b5061039c60195481565b3480156106b957600080fd5b506104296106c83660046143d8565b6006546001600160a01b0391821691161490565b3480156106e857600080fd5b506104296106f7366004614534565b600d60209081526000928352604080842090915290825290205460ff1681565b34801561072357600080fd5b5061072c6119f6565b6040516103a69190614567565b34801561074557600080fd5b5061039c6107543660046143d8565b60156020526000908152604090205481565b34801561077257600080fd5b5061039c6107813660046143d8565b6001600160a01b031660009081526020819052604090205490565b3480156107a857600080fd5b5061039c60185481565b3480156107be57600080fd5b506104296107cd366004614534565b600e60209081526000928352604080842090915290825290205460ff1681565b3480156107f957600080fd5b506103fc6108083660046143d8565b611ab6565b34801561081957600080fd5b506104596108283660046143fa565b611c4c565b34801561083957600080fd5b503360009081526020819052604090205461039c565b34801561085b57600080fd5b50333161039c565b34801561086f57600080fd5b5061039c611d38565b34801561088457600080fd5b506103cf6108933660046143fa565b6012602052600090815260409020546001600160a01b031681565b3480156108ba57600080fd5b5061039c60085481565b3480156108d057600080fd5b5061039c6108df3660046143d8565b60166020526000908152604090205481565b3480156108fd57600080fd5b506103fc611dcc565b34801561091257600080fd5b5061039c6109213660046143d8565b60146020526000908152604090205481565b34801561093f57600080fd5b5061065261094e3660046143fa565b611ddb565b6104596109613660046143fa565b611deb565b34801561097257600080fd5b50610429610981366004614473565b6121db565b34801561099257600080fd5b506104296109a1366004614473565b612292565b3480156109b257600080fd5b506104596109c13660046143fa565b6122aa565b3480156109d257600080fd5b5061039c6109e13660046144d9565b61289b565b3480156109f257600080fd5b50610459610a01366004614617565b612b75565b610459610a143660046144d9565b6130b6565b348015610a2557600080fd5b506006546001600160a01b03166103cf565b348015610a4357600080fd5b5061039c60075481565b348015610a5957600080fd5b5061039c610a68366004614534565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610a9f57600080fd5b5061072c6134ae565b348015610ab457600080fd5b50610459610ac33660046144d9565b6135c1565b348015610ad457600080fd5b50610459610ae33660046143fa565b613876565b348015610af457600080fd5b50610459610b033660046143d8565b6138dc565b348015610b1457600080fd5b50610429610b23366004614534565b600b60209081526000928352604080842090915290825290205460ff1681565b348015610b4f57600080fd5b50610429610b5e366004614534565b600c60209081526000928352604080842090915290825290205460ff1681565b348015610b8a57600080fd5b50610429610b993660046143d8565b60116020526000908152604090205460ff1681565b60098181548110610bbe57600080fd5b6000918252602090912001546001600160a01b0316905081565b606060038054610be7906146d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610c13906146d2565b8015610c605780601f10610c3557610100808354040283529160200191610c60565b820191906000526020600020905b815481529060010190602001808311610c4357829003601f168201915b5050505050905090565b600080610c756139e1565b9050610c828185856139eb565b5060019392505050565b3360009081526011602052604090205460ff16610cdf5760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b60448201526064015b60405180910390fd5b33600090815260136020526040902054600f90610cfe90600190614723565b81548110610d0e57610d0e61473a565b906000526020600020906007020160030160019054906101000a900460ff1615610d6e5760405162461bcd60e51b8152602060048201526011602482015270165bdd48185c994814dd5cdc195b991959607a1b6044820152606401610cd6565b610d783382613b43565b50565b3360009081526011602052604081205460ff16610dc95760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610cd6565b33600090815260136020526040902054600f90610de890600190614723565b81548110610df857610df861473a565b906000526020600020906007020160040154905090565b600080610e1a6139e1565b9050610e27858285613c02565b610e32858585613c8e565b506001949350505050565b600080610e486139e1565b9050610c82818585610e8085896001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610e8a9190614750565b6139eb565b600a6000610e9b6139e1565b6001600160a01b0316815260208101919091526040016000205460ff16610ef05760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610cd6565b6000828152601260209081526040808320546001600160a01b03168352601190915290205460ff16610f645760405162461bcd60e51b815260206004820152600e60248201527f4e6f7420612050726f73756d65720000000000000000000000000000000000006044820152606401610cd6565b6000828152601260209081526040808320546001600160a01b03168352600e909152812090610f916139e1565b6001600160a01b0316815260208101919091526040016000205460ff1615610ffb5760405162461bcd60e51b815260206004820152601360248201527f416c726561647920556e73757370656e646564000000000000000000000000006044820152606401610cd6565b6000828152601260209081526040808320546001600160a01b0316808452600e909252822090916001919061102e6139e1565b6001600160a01b03908116825260208083019390935260409182016000908120805460ff19169515159590951790945584168352600d9091528120906110726139e1565b6001600160a01b0316815260208101919091526040016000205460ff1615611102576001600160a01b0381166000908152600d60205260408120816110b56139e1565b6001600160a01b03908116825260208083019390935260409182016000908120805460ff19169515159590951790945584168352601690915281208054916110fc83614768565b91905055505b6001600160a01b0381166000908152601760205260408120805490826111278361477f565b9190505590506007548111156111e6576001600160a01b038216600090815260176020908152604080832083905560169091528120819055600f61116c600187614723565b8154811061117c5761117c61473a565b6000918252602090912060036007909202010180549115156101000261ff00199092169190911790556001601a6111b38286614723565b815481106111c3576111c361473a565b60009182526020909120600590910201600401805460ff19169115159190911790555b50505050565b600a60006111f86139e1565b6001600160a01b0316815260208101919091526040016000205460ff1661124d5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610cd6565b60095460009061125d90476147b0565b905060005b60095481101561133e576000600982815481106112815761128161473a565b60009182526020822001546040516001600160a01b039091169185919081818185875af1925050503d80600081146112d5576040519150601f19603f3d011682016040523d82523d6000602084013e6112da565b606091505b505090508061132b5760405162461bcd60e51b815260206004820152600b60248201527f43616c6c204661696c65640000000000000000000000000000000000000000006044820152606401610cd6565b50806113368161477f565b915050611262565b5050565b601b805461134f906146d2565b80601f016020809104026020016040519081016040528092919081815260200182805461137b906146d2565b80156113c85780601f1061139d576101008083540402835291602001916113c8565b820191906000526020600020905b8154815290600101906020018083116113ab57829003601f168201915b505050505081565b600a60006113dc6139e1565b6001600160a01b0316815260208101919091526040016000205460ff166114315760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610cd6565b60105481106114825760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420556e617070726f7665642050726f73756d657220494400006044820152606401610cd6565b600c6000601083815481106114995761149961473a565b60009182526020808320600160079093020191909101546001600160a01b031683528201929092526040018120906114cf6139e1565b6001600160a01b0316815260208101919091526040016000205460ff161561155f5760405162461bcd60e51b815260206004820152602360248201527f50726f73756d657220416c726561647920646973617070726f7665642062792060448201527f796f7500000000000000000000000000000000000000000000000000000000006064820152608401610cd6565b6001600c6000601084815481106115785761157861473a565b60009182526020808320600160079093020191909101546001600160a01b031683528201929092526040018120906115ae6139e1565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600c6000601083815481106115fc576115fc61473a565b60009182526020808320600160079093020191909101546001600160a01b031683528201929092526040018120906116326139e1565b6001600160a01b0316815260208101919091526040016000205460ff1615611730576000600b60006010848154811061166d5761166d61473a565b60009182526020808320600160079093020191909101546001600160a01b031683528201929092526040018120906116a36139e1565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060146000601083815481106116f1576116f161473a565b60009182526020808320600160079093020191909101546001600160a01b03168352820192909252604001812080549161172a83614768565b91905055505b600060156000601084815481106117495761174961473a565b60009182526020808320600160079093020191909101546001600160a01b0316835282019290925260400181208054916117828361477f565b91905055905060075481111561133e5761179b82613e7b565b60156000601084815481106117b2576117b261473a565b60009182526020808320600160079093020191909101546001600160a01b031683528201929092526040018120819055601080546014929190859081106117fb576117fb61473a565b60009182526020808320600160079093020191909101546001600160a01b031683528201929092526040018120555050565b601a818154811061183d57600080fd5b9060005260206000209060050201600091509050806000015490806001015490806002015490806003018054611872906146d2565b80601f016020809104026020016040519081016040528092919081815260200182805461189e906146d2565b80156118eb5780601f106118c0576101008083540402835291602001916118eb565b820191906000526020600020905b8154815290600101906020018083116118ce57829003601f168201915b5050506004909301549192505060ff1685565b3360009081526011602052604081205460ff1661194c5760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610cd6565b33600090815260136020526040902054600f9061196b90600190614723565b8154811061197b5761197b61473a565b906000526020600020906007020160050154905090565b600f81815481106119a257600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601549496506001600160a01b0390931694919360ff8083169461010090930416929088565b6060600f805480602002602001604051908101604052809291908181526020016000905b82821015611aad57600084815260209081902060408051610100808201835260078702909301805482526001808201546001600160a01b031683870152600282015493830193909352600381015460ff8082161515606085015294900490931615156080820152600483015460a0820152600583015460c082015260069092015460e08301529083529092019101611a1a565b50505050905090565b6060600a6000611ac46139e1565b6001600160a01b0316815260208101919091526040016000205460ff16611b195760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610cd6565b6001600160a01b0382166000908152600b6020526040812090611b3a6139e1565b6001600160a01b0316815260208101919091526040016000205460ff1615611b9557505060408051808201909152601181527f50726f73756d657220417070726f766564000000000000000000000000000000602082015290565b6001600160a01b0382166000908152600c6020526040812090611bb66139e1565b6001600160a01b0316815260208101919091526040016000205460ff1615611c1157505060408051808201909152601481527f50726f73756d657220446973617070726f766564000000000000000000000000602082015290565b5060408051808201909152601981527f50726f73756d6572204e6f74205665726966696564205965740000000000000060208201525b919050565b3360009081526011602052604090205460ff16611c9a5760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610cd6565b33600090815260136020526040902054600f90611cb990600190614723565b81548110611cc957611cc961473a565b906000526020600020906007020160030160019054906101000a900460ff1615611d295760405162461bcd60e51b8152602060048201526011602482015270165bdd48185c994814dd5cdc195b991959607a1b6044820152606401610cd6565b610d7833826140a0565b905090565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611d8957600080fd5b505afa158015611d9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc191906147de565b509195945050505050565b606060048054610be7906146d2565b601081815481106119a257600080fd5b336000908152600a602052604090205460ff1615611e4b5760405162461bcd60e51b815260206004820152601060248201527f596f752061726520616e204f776e6572000000000000000000000000000000006044820152606401610cd6565b600854341015611ec35760405162461bcd60e51b815260206004820152602560248201527f526567697374726174696f6e204661696c65642c20496e73756666696369656e60448201527f74204665650000000000000000000000000000000000000000000000000000006064820152608401610cd6565b3360009081526011602052604090205460ff1615611f495760405162461bcd60e51b815260206004820152602960248201527f596f752061726520616c726561647920612050726f73756d657220696e20746860448201527f65204e6574776f726b00000000000000000000000000000000000000000000006064820152608401610cd6565b611f51614209565b15611fc45760405162461bcd60e51b815260206004820152602b60248201527f596f75206861766520616c72656164792072657175657374656420666f72205260448201527f6567697374726174696f6e0000000000000000000000000000000000000000006064820152608401610cd6565b8060005b8115611fed57611fd9600a836147b0565b915080611fe58161477f565b915050611fc8565b80600c1461203d5760405162461bcd60e51b815260206004820152601b60248201527f456e746572206120313220646967697420416164686172204e6f2e00000000006044820152606401610cd6565b505060408051610100808201835260008083523360208401908152938301948552606083018181526080840182815260a0850183815260c0860184815260e0870185815260108054600181018255965296517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67260079096029586015596517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae673850180546001600160a01b0319166001600160a01b0390921691909117905596517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67484015590517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67583018054925161ffff1990931691151561ff001916919091179115159093021790915592517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67684015590517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae677830155517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67890910155565b6000806121e66139e1565b6001600160a01b03818116600090815260016020908152604080832093891683529290522054909150838110156122855760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610cd6565b610e3282868684036139eb565b60008061229d6139e1565b9050610c82818585613c8e565b600a60006122b66139e1565b6001600160a01b0316815260208101919091526040016000205460ff1661230b5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610cd6565b601054811061235c5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420556e617070726f7665642050726f73756d657220494400006044820152606401610cd6565b600b6000601083815481106123735761237361473a565b60009182526020808320600160079093020191909101546001600160a01b031683528201929092526040018120906123a96139e1565b6001600160a01b0316815260208101919091526040016000205460ff16156124135760405162461bcd60e51b815260206004820181905260248201527f50726f73756d657220416c726561647920617070726f76656420627920796f756044820152606401610cd6565b6001600b60006010848154811061242c5761242c61473a565b60009182526020808320600160079093020191909101546001600160a01b031683528201929092526040018120906124626139e1565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600c6000601083815481106124b0576124b061473a565b60009182526020808320600160079093020191909101546001600160a01b031683528201929092526040018120906124e66139e1565b6001600160a01b0316815260208101919091526040016000205460ff16156125e4576000600c6000601084815481106125215761252161473a565b60009182526020808320600160079093020191909101546001600160a01b031683528201929092526040018120906125576139e1565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060156000601083815481106125a5576125a561473a565b60009182526020808320600160079093020191909101546001600160a01b0316835282019290925260400181208054916125de83614768565b91905055505b600060146000601084815481106125fd576125fd61473a565b60009182526020808320600160079093020191909101546001600160a01b0316835282019290925260400181208054916126368361477f565b91905055905060075481111561133e5760016010838154811061265b5761265b61473a565b60009182526020909120600790910201600301805460ff1916911515919091179055600f5461268b906001614750565b6010838154811061269e5761269e61473a565b906000526020600020906007020160000181905550600160116000601085815481106126cc576126cc61473a565b60009182526020808320600792909202909101600101546001600160a01b031683528201929092526040019020805460ff191691151591909117905560108054600f9190849081106127205761272061473a565b600091825260208083208454600181810187559585529190932060079283029093018054919092029092019182558281015492820180546001600160a01b0319166001600160a01b03909416939093179092556002808301549082015560038083018054918301805460ff938416151560ff19821681178355925461010090819004909416151590930261ff001990921661ffff199093169290921717905560048083015490820155600580830154908201556006918201549101556127e582613e7b565b600f80546127f590600190614723565b815481106128055761280561473a565b600091825260208083206001600790930201820154600f8054855260129092526040842080546001600160a01b0319166001600160a01b039092169190911790558054926013929091906128599085614723565b815481106128695761286961473a565b60009182526020808320600160079093020191909101546001600160a01b031683528201929092526040019020555050565b3360009081526011602052604081205460ff166128e95760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610cd6565b33600090815260136020526040902054600f9061290890600190614723565b815481106129185761291861473a565b906000526020600020906007020160030160019054906101000a900460ff16156129785760405162461bcd60e51b8152602060048201526011602482015270165bdd48185c994814dd5cdc195b991959607a1b6044820152606401610cd6565b33600090815260136020526040902054600f9061299790600190614723565b815481106129a7576129a761473a565b906000526020600020906007020160060154600014612a085760405162461bcd60e51b815260206004820152601e60248201527f596f75206861766520416c7265616479205374616b656420456e6572677900006044820152606401610cd6565b3360009081526013602052604090205483600f612a26600184614723565b81548110612a3657612a3661473a565b906000526020600020906007020160040181905550612a5484614270565b600f612a61600184614723565b81548110612a7157612a7161473a565b600091825260209091206005600790920201015582600f612a93600184614723565b81548110612aa357612aa361473a565b6000918252602090912060066007909202010155601c54612acd906001600160a01b031684612292565b50807f4007ce7dab5a51b53d861f6a858af463890cd224c3b719792961be0e13d482ac600f612afd600184614723565b81548110612b0d57612b0d61473a565b906000526020600020906007020160040154600f600185612b2e9190614723565b81548110612b3e57612b3e61473a565b6000918252602091829020600560079092020101546040805193845291830152810186905260600160405180910390a29392505050565b60116000612b816139e1565b6001600160a01b0316815260208101919091526040016000205460ff16612bea5760405162461bcd60e51b815260206004820152601260248201527f596f75206e6f7420612050726f73756d657200000000000000000000000000006044820152606401610cd6565b6000828152601260209081526040808320546001600160a01b03168352601190915290205460ff16612c5e5760405162461bcd60e51b815260206004820152601660248201527f41636375736564206e6f7420612050726f73756d6572000000000000000000006044820152606401610cd6565b6000828152601260209081526040808320546001600160a01b03168352600d909152812090612c8b6139e1565b6001600160a01b0316815260208101919091526040016000205460ff1615612cf55760405162461bcd60e51b815260206004820152601d60248201527f416363757365642050726f73756d65722069732053757370656e6465640000006044820152606401610cd6565b600d6000612d016139e1565b6001600160a01b0390811682526020808301939093526040918201600090812086825260128552838220549092168152925290205460ff1615612d7a5760405162461bcd60e51b8152602060048201526011602482015270165bdd48185c994814dd5cdc195b991959607a1b6044820152606401610cd6565b6000828152601260209081526040808320546001600160a01b03168352600c909152812090612da76139e1565b6001600160a01b0316815260208101919091526040016000205460ff1615612e115760405162461bcd60e51b815260206004820152601760248201527f50726f73756d657220697320446973617070726f7665640000000000000000006044820152606401610cd6565b600c6000612e1d6139e1565b6001600160a01b0390811682526020808301939093526040918201600090812086825260128552838220549092168152925290205460ff1615612ea25760405162461bcd60e51b815260206004820152601360248201527f596f752061726520446973617070726f766564000000000000000000000000006044820152606401610cd6565b60006040518060a00160405280601a805490506001612ec19190614750565b815260200160136000612ed26139e1565b6001600160a01b03166001600160a01b03168152602001908152602001600020548152602001848152602001838152602001600015158152509050601954601a80549050101561300757601a8054600181018255600091909152815160059091027f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e81019182556020808401517f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63f83015560408401517f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff64083015560608401518051859493612fe6937f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff641909101920190614328565b50608091909101516004909101805460ff191691151591909117905561308f565b80601a60195460185461301a919061482e565b8154811061302a5761302a61473a565b90600052602060002090600502016000820151816000015560208201518160010155604082015181600201556060820151816003019080519060200190613072929190614328565b50608091909101516004909101805460ff19169115159190911790555b60195460185410156130b157601880549060006130ab8361477f565b91905055505b505050565b3360009081526011602052604090205460ff166131045760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610cd6565b33600090815260136020526040902054600f9061312390600190614723565b815481106131335761313361473a565b906000526020600020906007020160030160019054906101000a900460ff16156131935760405162461bcd60e51b8152602060048201526011602482015270165bdd48185c994814dd5cdc195b991959607a1b6044820152606401610cd6565b600081600f6131a3600186614723565b815481106131b3576131b361473a565b9060005260206000209060070201600501546131cf9190614842565b9050803410156132215760405162461bcd60e51b815260206004820152601960248201527f4469646e27742073656e6420656e6f756768204d6174696321000000000000006044820152606401610cd6565b600f61322e600185614723565b8154811061323e5761323e61473a565b9060005260206000209060070201600601548211156132c55760405162461bcd60e51b815260206004820152603660248201527f53656c65637465642050726f647563657220646f206861766520656e6f75676860448201527f20456e6f75676820456e657267792042616c616e6365000000000000000000006064820152608401610cd6565b81600f6132d3600186614723565b815481106132e3576132e361473a565b9060005260206000209060070201600601546132ff9190614723565b600f61330c600186614723565b8154811061331c5761331c61473a565b6000918252602090912060066007909202010155601c54613347906001600160a01b03163384613c8e565b6000838152601260205260408082205490516001600160a01b039091169083908381818185875af1925050503d806000811461339f576040519150601f19603f3d011682016040523d82523d6000602084013e6133a4565b606091505b50509050806133f55760405162461bcd60e51b815260206004820152600b60248201527f63616c6c206661696c65640000000000000000000000000000000000000000006044820152606401610cd6565b600f613402600186614723565b815481106134125761341261473a565b60009182526020808320600460079093020191909101543383526013909152604090912054857fa46b53c1e4323dcbd0cc304fa8e1718a9e400f89e5ce26b321e4edb32bfdad0b600f613466600184614723565b815481106134765761347661473a565b906000526020600020906007020160050154876040516134a0929190918252602082015260400190565b60405180910390a450505050565b6060600a60006134bc6139e1565b6001600160a01b0316815260208101919091526040016000205460ff166135115760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610cd6565b601080546040805160208084028201810190925282815292919060009084018215611aad57600084815260209081902060408051610100808201835260078702909301805482526001808201546001600160a01b031683870152600282015493830193909352600381015460ff8082161515606085015294900490931615156080820152600483015460a0820152600583015460c082015260069092015460e08301529083529092019101611a1a565b600a60006135cd6139e1565b6001600160a01b0316815260208101919091526040016000205460ff166136225760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610cd6565b6000828152601260209081526040808320546001600160a01b031680845260119092529091205460ff166136985760405162461bcd60e51b815260206004820152600e60248201527f4e6f7420612050726f73756d65720000000000000000000000000000000000006044820152606401610cd6565b6001600160a01b0381166000908152600d60205260408120906136b96139e1565b6001600160a01b0316815260208101919091526040016000205460ff16156137235760405162461bcd60e51b815260206004820152601160248201527f416c72656164792053757370656e6465640000000000000000000000000000006044820152606401610cd6565b6001600160a01b0381166000908152600d602052604081206001916137466139e1565b6001600160a01b03908116825260208083019390935260409182016000908120805460ff19169515159590951790945584168352600e90915281209061378a6139e1565b6001600160a01b0316815260208101919091526040016000205460ff161561381a576001600160a01b0381166000908152600e60205260408120816137cd6139e1565b6001600160a01b03908116825260208083019390935260409182016000908120805460ff191695151595909517909455841683526017909152812080549161381483614768565b91905055505b6001600160a01b03811660009081526016602052604081208054908261383f8361477f565b9190505590506007548111156111e6576001600160a01b0382166000908152601660205260408120556001600f61116c8287614723565b600a60006138826139e1565b6001600160a01b0316815260208101919091526040016000205460ff166138d75760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610cd6565b600855565b600a60006138e86139e1565b6001600160a01b0316815260208101919091526040016000205460ff1661393d5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610cd6565b60005b60095481101561133e576139526139e1565b6001600160a01b03166009828154811061396e5761396e61473a565b6000918252602090912001546001600160a01b031614156139cf57816009828154811061399d5761399d61473a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050565b806139d98161477f565b915050613940565b6000611d336142f4565b6001600160a01b038316613a665760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610cd6565b6001600160a01b038216613ae25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610cd6565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038216613b995760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610cd6565b8060026000828254613bab9190614750565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146111e65781811015613c815760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610cd6565b6111e684848484036139eb565b6001600160a01b038316613d0a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610cd6565b6001600160a01b038216613d865760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610cd6565b6001600160a01b03831660009081526020819052604090205481811015613e155760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610cd6565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36111e6565b600a6000613e876139e1565b6001600160a01b0316815260208101919091526040016000205460ff16613edc5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610cd6565b6010548110613f2d5760405162461bcd60e51b815260206004820181905260248201527f496e76616c696420756e617070726f76656450726f73756d657220496e6465786044820152606401610cd6565b805b601054613f3e90600190614723565b811015614039576010613f52826001614750565b81548110613f6257613f6261473a565b906000526020600020906007020160108281548110613f8357613f8361473a565b60009182526020909120825460079092020190815560018083015490820180546001600160a01b0319166001600160a01b039092169190911790556002808301549082015560038083018054918301805460ff938416151560ff19821681178355925461010090819004909416151590930261ff001990921661ffff19909316929092171790556004808301549082015560058083015490820155600691820154910155806140318161477f565b915050613f2f565b50601080548061404b5761404b614861565b6000828152602081206007600019909301928302018181556001810180546001600160a01b03191690556002810182905560038101805461ffff19169055600481018290556005810182905560060155905550565b6001600160a01b03821661411c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610cd6565b6001600160a01b038216600090815260208190526040902054818110156141ab5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610cd6565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6000805b601054811015614268576010818154811061422a5761422a61473a565b60009182526020909120600790910201600101546001600160a01b031633141561425657600191505090565b806142608161477f565b91505061420d565b506000905090565b3360009081526011602052604081205460ff166142be5760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610cd6565b601d82905560006142cd611d38565b90506142d981846147b0565b6142e8906402540be400614842565b601e8190559392505050565b60006014361080159061431157506006546001600160a01b031633145b15614323575060131936013560601c90565b503390565b828054614334906146d2565b90600052602060002090601f016020900481019282614356576000855561439c565b82601f1061436f57805160ff191683800117855561439c565b8280016001018555821561439c579182015b8281111561439c578251825591602001919060010190614381565b506143a89291506143ac565b5090565b5b808211156143a857600081556001016143ad565b80356001600160a01b0381168114611c4757600080fd5b6000602082840312156143ea57600080fd5b6143f3826143c1565b9392505050565b60006020828403121561440c57600080fd5b5035919050565b6000815180845260005b818110156144395760208185018101518683018201520161441d565b8181111561444b576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006143f36020830184614413565b6000806040838503121561448657600080fd5b61448f836143c1565b946020939093013593505050565b6000806000606084860312156144b257600080fd5b6144bb846143c1565b92506144c9602085016143c1565b9150604084013590509250925092565b600080604083850312156144ec57600080fd5b50508035926020909101359150565b85815284602082015283604082015260a06060820152600061452060a0830185614413565b905082151560808301529695505050505050565b6000806040838503121561454757600080fd5b614550836143c1565b915061455e602084016143c1565b90509250929050565b602080825282518282018190526000919060409081850190868401855b828110156145f457815180518552868101516001600160a01b031687860152858101518686015260608082015115159086015260808082015115159086015260a0808201519086015260c0808201519086015260e090810151908501526101009093019290850190600101614584565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561462a57600080fd5b82359150602083013567ffffffffffffffff8082111561464957600080fd5b818501915085601f83011261465d57600080fd5b81358181111561466f5761466f614601565b604051601f8201601f19908116603f0116810190838211818310171561469757614697614601565b816040528281528860208487010111156146b057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600181811c908216806146e657607f821691505b6020821081141561470757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156147355761473561470d565b500390565b634e487b7160e01b600052603260045260246000fd5b600082198211156147635761476361470d565b500190565b6000816147775761477761470d565b506000190190565b60006000198214156147935761479361470d565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826147bf576147bf61479a565b500490565b805169ffffffffffffffffffff81168114611c4757600080fd5b600080600080600060a086880312156147f657600080fd5b6147ff866147c4565b9450602086015193506040860151925060608601519150614822608087016147c4565b90509295509295909350565b60008261483d5761483d61479a565b500690565b600081600019048311821515161561485c5761485c61470d565b500290565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220a0d5d6827fcfded120a9d712f8320418bcb27f21a2fe6a8605b4757319651d2564736f6c63430008080033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getTrustedForwarder()": {
        "returns": {
          "forwarder": "The address of the Forwarder contract that is being used."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "The address of the Forwarder contract that is being used."
        },
        "returns": {
          "_0": "isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLatestPrice()": {
        "notice": "Returns the latest price"
      },
      "getTrustedForwarder()": {
        "notice": ":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet."
      },
      "isTrustedForwarder(address)": {
        "notice": ":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 188,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 194,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 196,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 198,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 200,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2490,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 53,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1360,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "required",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1362,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "regFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1365,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "owners",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1369,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "isOwner",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1375,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "approved",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1381,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "disapproved",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1387,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "suspended",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1393,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "unSuspended",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1414,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "ApprovedProsumers",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_struct(prosumer)1410_storage)dyn_storage"
      },
      {
        "astId": 1418,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "unApprovedProsumers",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_struct(prosumer)1410_storage)dyn_storage"
      },
      {
        "astId": 1422,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "isProsumer",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1426,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "prosumerAddress",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1430,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "prosumerID",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1434,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "approvalCount",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1438,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "disapprovalCount",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1442,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "suspensionCount",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1446,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "unSuspensionCount",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1459,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "complainCount",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 1462,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "maxComplains",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 1466,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "complains",
        "offset": 0,
        "slot": "26",
        "type": "t_array(t_struct(Complain)1457_storage)dyn_storage"
      },
      {
        "astId": 1556,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "versionRecipient",
        "offset": 0,
        "slot": "27",
        "type": "t_string_storage"
      },
      {
        "astId": 911,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "escrowAccount",
        "offset": 0,
        "slot": "28",
        "type": "t_address"
      },
      {
        "astId": 913,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "EnergyUnitPrice_usd",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 915,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "EnergyUnitPrice_matic",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Complain)1457_storage)dyn_storage": {
        "base": "t_struct(Complain)1457_storage",
        "encoding": "dynamic_array",
        "label": "struct MultiSig.Complain[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(prosumer)1410_storage)dyn_storage": {
        "base": "t_struct(prosumer)1410_storage",
        "encoding": "dynamic_array",
        "label": "struct MultiSig.prosumer[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Complain)1457_storage": {
        "encoding": "inplace",
        "label": "struct MultiSig.Complain",
        "members": [
          {
            "astId": 1448,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_complainID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1450,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_complainant",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1452,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_accused",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1454,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_complain",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1456,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_resolved",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(prosumer)1410_storage": {
        "encoding": "inplace",
        "label": "struct MultiSig.prosumer",
        "members": [
          {
            "astId": 1395,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_prosumerID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1397,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_address",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1399,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_aadharId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1401,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_approved",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1403,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_suspended",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1405,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_energyUnitPriceUSD",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1407,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_energyUnitPriceMatic",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1409,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_stakedEnergyBalance",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
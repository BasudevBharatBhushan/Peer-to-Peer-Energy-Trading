{
  "address": "0x8405530272edF14FB5F9671fc25d3efC16a8B5D4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ApprovedProsumers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_prosumerID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_aadharId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceMatic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakedEnergyBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unApprovedProsumerID",
          "type": "uint256"
        }
      ],
      "name": "DisApproveProsumer_OwnerSpecific",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Transaction",
      "outputs": [
        {
          "internalType": "address",
          "name": "_producer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_producerID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_consumerID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_consumerEnergyNeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_producerUnitPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_producerUnitPriceMATIC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_producerPaybleAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unitEnergyPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "excessEnergyToken",
          "type": "uint256"
        }
      ],
      "name": "advert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unApprovedProsumerID",
          "type": "uint256"
        }
      ],
      "name": "approveProsumer_OwnerSpecific",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "producerID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "energy_need",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "energyBurned",
          "type": "uint256"
        }
      ],
      "name": "burnEnergy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "disapproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPendingTxn",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_producer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_consumer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_producerID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_consumerID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_consumerEnergyNeed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_producerUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_producerUnitPriceMATIC",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_producerPaybleAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnergyTrade.Txn[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isProsumer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mySetUnitPrice_Matic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mySetUnitPrice_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "processTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "energyProduced",
          "type": "uint256"
        }
      ],
      "name": "produceEnergy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prosumerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "prosumerID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "regFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeProsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aadharNo",
          "type": "uint256"
        }
      ],
      "name": "req_Registration",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_regFee",
          "type": "uint256"
        }
      ],
      "name": "setRegFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "showApprovalList_OwnerSpecific",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_prosumerID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_aadharId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceMatic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakedEnergyBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnergyTrade.prosumer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_unapprovedProsumerAddress",
          "type": "address"
        }
      ],
      "name": "showApprovalStatus_OwnerSpecific",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "showUnapprovalList_OwnerSpecific",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_prosumerID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_aadharId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceMatic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakedEnergyBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnergyTrade.prosumer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "show_Approved_Prosumers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_prosumerID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_aadharId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceMatic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakedEnergyBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnergyTrade.prosumer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "show_Unapproved_Prosumers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_prosumerID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_aadharId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceMatic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakedEnergyBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnergyTrade.prosumer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unApprovedProsumers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_prosumerID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_aadharId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceMatic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakedEnergyBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewEnergyBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewEscrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewMaticBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2c1198531c45cb11e8ec08d1abd2c91e4fa1f3c961af9784b02a89e6474d8eba",
  "receipt": {
    "to": null,
    "from": "0x85b3dB26424a88e7C1319E40a6324d64Acf1fFA2",
    "contractAddress": "0x8405530272edF14FB5F9671fc25d3efC16a8B5D4",
    "transactionIndex": 19,
    "gasUsed": "3691357",
    "logsBloom": "0x
    "blockHash": "0xd749cc434031ed71dfa62f0c7b036e5b52d3a5ddc2bc2733b6aaada0295738fa",
    "transactionHash": "0x2c1198531c45cb11e8ec08d1abd2c91e4fa1f3c961af9784b02a89e6474d8eba",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 29611712,
        "transactionHash": "0x2c1198531c45cb11e8ec08d1abd2c91e4fa1f3c961af9784b02a89e6474d8eba",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000085b3db26424a88e7c1319e40a6324d64acf1ffa2",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000013abe78a16130000000000000000000000000000000000000000000000000072cba7f24e6abcb00000000000000000000000000000000000000000000009540abd22240875a91300000000000000000000000000000000000000000000000072b7fc0ac454a9b00000000000000000000000000000000000000000000009540ad0ce0b928bbc13",
        "logIndex": 78,
        "blockHash": "0xd749cc434031ed71dfa62f0c7b036e5b52d3a5ddc2bc2733b6aaada0295738fa"
      }
    ],
    "blockNumber": 29611712,
    "cumulativeGasUsed": "9585819",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x85b3dB26424a88e7C1319E40a6324d64Acf1fFA2",
      "0xaA644EfCDFC1Adaf3CAb69Ae683638f4705F4C81",
      "0xB6E7F3234C709B6C96a60D14A85d41FADDd22FDA"
    ],
    2
  ],
  "numDeployments": 3,
  "solcInputHash": "ab5056ef49a9ab20d0f2d620ef97c95f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ApprovedProsumers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unApprovedProsumerID\",\"type\":\"uint256\"}],\"name\":\"DisApproveProsumer_OwnerSpecific\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Transaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_producer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_producerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_consumerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_consumerEnergyNeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_producerUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_producerUnitPriceMATIC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_producerPaybleAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unitEnergyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"excessEnergyToken\",\"type\":\"uint256\"}],\"name\":\"advert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unApprovedProsumerID\",\"type\":\"uint256\"}],\"name\":\"approveProsumer_OwnerSpecific\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"producerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"energy_need\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"energyBurned\",\"type\":\"uint256\"}],\"name\":\"burnEnergy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disapproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPendingTxn\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_producer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_producerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_consumerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_consumerEnergyNeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_producerUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_producerUnitPriceMATIC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_producerPaybleAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct EnergyTrade.Txn[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isProsumer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mySetUnitPrice_Matic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mySetUnitPrice_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"energyProduced\",\"type\":\"uint256\"}],\"name\":\"produceEnergy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prosumerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prosumerID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeProsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aadharNo\",\"type\":\"uint256\"}],\"name\":\"req_Registration\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_regFee\",\"type\":\"uint256\"}],\"name\":\"setRegFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showApprovalList_OwnerSpecific\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct EnergyTrade.prosumer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unapprovedProsumerAddress\",\"type\":\"address\"}],\"name\":\"showApprovalStatus_OwnerSpecific\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showUnapprovalList_OwnerSpecific\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct EnergyTrade.prosumer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"show_Approved_Prosumers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct EnergyTrade.prosumer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"show_Unapproved_Prosumers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct EnergyTrade.prosumer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unApprovedProsumers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewEnergyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewEscrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewMaticBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLatestPrice()\":{\"notice\":\"Returns the latest price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnergyTrade.sol\":\"EnergyTrade\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/EnergyToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Energy_Token is ERC20{\\n    /*\\n        Initial Supply is 50 ,- 50 WEI\\n        Initial supply 50e18\\n        or, 50*10**18\\n    */\\n    constructor () ERC20(\\\"Enery Token\\\" , \\\"UNIT\\\"){}\\n\\n    function mint(address to, uint256 value)external{\\n        _mint(to, value);\\n    }\\n\\n    function burn(address to, uint256 value)external{\\n        _burn(to, value);\\n    }\\n    \\n\\n}\",\"keccak256\":\"0x884386c6e9eed0e26d2c62e5ec74232b5b7ed3fbf770e5d999e9ba8bfcc7ca12\",\"license\":\"UNLICENSED\"},\"contracts/EnergyTrade.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./EnergyToken.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract EnergyTrade is Energy_Token, PriceConverter {\\r\\n    /*************Global Variables************/\\r\\n\\r\\n    /*-------Owner Variables-------------------------*/\\r\\n\\r\\n    address[] public owners; //Array to store all the owners in the Network\\r\\n    mapping(address => bool) public isOwner;\\r\\n    uint256 public required; //Min Owners required for Approval\\r\\n    uint256 public regFee; //Reg Fee set by the owner, to add prosumers in the Network\\r\\n    address escrowAccount; //Address of the Deployed Smart Contract\\r\\n\\r\\n    /*-----------------------------------------------------------------------------------------------*/\\r\\n\\r\\n    /*-------Prosumer Variables-------------------------*/\\r\\n\\r\\n    struct prosumer {\\r\\n        uint256 _prosumerID;\\r\\n        address _address;\\r\\n        uint256 _aadharId; //12 digit\\r\\n        bool _approved;\\r\\n        uint256 _energyUnitPriceUSD;\\r\\n        uint256 _energyUnitPriceMatic;\\r\\n        uint256 _stakedEnergyBalance;\\r\\n    }\\r\\n    mapping(address => bool) public isProsumer;\\r\\n\\r\\n    /* Created These Maps to optimise Gas */\\r\\n    mapping(uint256 => address) public prosumerAddress;\\r\\n    mapping(address => uint256) public prosumerID;\\r\\n\\r\\n    prosumer[] public ApprovedProsumers;\\r\\n\\r\\n    mapping(address => mapping(address => bool)) public approved; //address1 = unapprovedProsumer address, address2 = address Of Owner, bool\\r\\n    mapping(address => mapping(address => bool)) public disapproved; //address1 = unapprovedProsumer address, address2 = address Of Owner, bool\\r\\n\\r\\n    //--> Pending States before Approval\\r\\n\\r\\n    prosumer[] public unApprovedProsumers;\\r\\n\\r\\n    struct Txn {\\r\\n        address _producer;\\r\\n        address _consumer;\\r\\n        uint256 _producerID;\\r\\n        uint256 _consumerID;\\r\\n        uint256 _consumerEnergyNeed;\\r\\n        uint256 _producerUnitPriceUSD;\\r\\n        uint256 _producerUnitPriceMATIC;\\r\\n        uint256 _producerPaybleAmount;\\r\\n    }\\r\\n\\r\\n    Txn[] public Transaction;\\r\\n\\r\\n    /*-----------------------------------------------------------------------------------------------*/\\r\\n\\r\\n    /*-----------Transaction Variables----------------------------------------------*/\\r\\n\\r\\n    /****************Constructor************/\\r\\n\\r\\n    constructor(address[] memory _owners, uint _required) {\\r\\n        //We will pass multiple owners & set a particular requirement number of apporvals needed\\r\\n\\r\\n        require(_owners.length > 0, \\\"Owners Required\\\");\\r\\n        require(_required > 0 && required <= _owners.length, \\\"Invalid required number of owners\\\");\\r\\n\\r\\n        for (uint i; i < _owners.length; i++) {\\r\\n            address owner = _owners[i];\\r\\n            require(owner != address(0), \\\"invalid owner\\\");\\r\\n            require(!isOwner[owner], \\\"Owner is not unique\\\");\\r\\n\\r\\n            isOwner[owner] = true;\\r\\n            owners.push(owner);\\r\\n        }\\r\\n\\r\\n        required = _required;\\r\\n        escrowAccount = address(this);\\r\\n    }\\r\\n\\r\\n    /*-----------------------------------------------------------------------------------------------*/\\r\\n\\r\\n    /********************ESCROW FUNCTIONS**********************************/\\r\\n\\r\\n    /*-------------SPECIAL FUNCTION-------------------*/\\r\\n\\r\\n    function transferOwnership(address newOwner)public onlyOwner {\\r\\n        for(uint256 i = 0; i< owners.length; i++){\\r\\n            if(owners[i]==msg.sender){\\r\\n                owners[i]=newOwner;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //--> 1. Set Registration Fee\\r\\n\\r\\n    function setRegFee(uint256 _regFee) public onlyOwner {\\r\\n        regFee = _regFee;\\r\\n    }\\r\\n\\r\\n    //--> 2. Verify Details of Unapproved Prosumer\\r\\n\\r\\n    //-->2.1 Internal Functions\\r\\n\\r\\n    function _getApprovalCount(uint256 _unApprovedProsumerID) private view returns (uint256 count) {\\r\\n        for (uint256 i = 0; i < owners.length; i++) {\\r\\n            if (approved[unApprovedProsumers[_unApprovedProsumerID]._address][owners[i]]) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    function _getDisApprovalCount(\\r\\n        uint256 _unApprovedProsumerID\\r\\n    ) private view returns (uint256 count) {\\r\\n        for (uint256 i = 0; i < owners.length; i++) {\\r\\n            if (disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][owners[i]]) {\\r\\n                count += i;\\r\\n            }\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    function deleteElementFrom_UnApprovedProsumers(\\r\\n        uint256 _unApprovedProsumerID\\r\\n    ) internal onlyOwner {\\r\\n        require(\\r\\n            _unApprovedProsumerID < unApprovedProsumers.length,\\r\\n            \\\"Invalid unapprovedProsumer Index\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = _unApprovedProsumerID; i < unApprovedProsumers.length - 1; i++) {\\r\\n            unApprovedProsumers[i] = unApprovedProsumers[i + 1];\\r\\n        }\\r\\n        unApprovedProsumers.pop();\\r\\n    }\\r\\n\\r\\n    /*-----------------------------------------------------------------------------------------------*/\\r\\n\\r\\n    //-->2.2 Show all Approved or Unapproved Prosumer\\r\\n\\r\\n    function show_Unapproved_Prosumers() public view onlyOwner returns (prosumer[] memory) {\\r\\n        return unApprovedProsumers;\\r\\n    }\\r\\n\\r\\n    function show_Approved_Prosumers() public view returns (prosumer[] memory) {\\r\\n        //Public Function anybody can call\\r\\n        return ApprovedProsumers;\\r\\n    }\\r\\n\\r\\n    //-->2.3 Approval Status [Owner Specific]\\r\\n\\r\\n    function showApprovalStatus_OwnerSpecific(\\r\\n        address _unapprovedProsumerAddress\\r\\n    ) public view onlyOwner returns (string memory) {\\r\\n        if (approved[_unapprovedProsumerAddress][msg.sender]) {\\r\\n            return (\\\"Prosumer Approved\\\");\\r\\n        } else if (disapproved[_unapprovedProsumerAddress][msg.sender]) {\\r\\n            return (\\\"Prosumer Disapproved\\\");\\r\\n        } else {\\r\\n            return (\\\"Prosumer Not Verified Yet\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //--> 2.4 Show UnApproved Prosumer [Owner Specific]\\r\\n\\r\\n    function showUnapprovalList_OwnerSpecific() public view onlyOwner returns (prosumer[] memory) {\\r\\n        prosumer[] memory pr = new prosumer[](unApprovedProsumers.length);\\r\\n        for (uint256 i = 0; i < unApprovedProsumers.length; i++) {\\r\\n            if (approved[unApprovedProsumers[i]._address][msg.sender] == false) {\\r\\n                pr[i] = unApprovedProsumers[i];\\r\\n            }\\r\\n        }\\r\\n        return pr;\\r\\n    }\\r\\n\\r\\n    //--> 2.5 Show Approved Prosumer [Owner Specific]\\r\\n\\r\\n    function showApprovalList_OwnerSpecific() public view onlyOwner returns (prosumer[] memory) {\\r\\n        prosumer[] memory pr = new prosumer[](unApprovedProsumers.length);\\r\\n        for (uint256 i = 0; i < unApprovedProsumers.length; i++) {\\r\\n            if (approved[unApprovedProsumers[i]._address][msg.sender] == true) {\\r\\n                pr[i] = unApprovedProsumers[i];\\r\\n            }\\r\\n        }\\r\\n        return pr;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n- Once Prosumer is Approved in the Network, you cannot remove him.\\r\\n- Why? Because he has already gone through a verification process by multiple owners.\\r\\n- Though the function can be implemented in Future, if we feel the need of it\\r\\n*/\\r\\n\\r\\n    //--> 3. Approve Prosumer\\r\\n\\r\\n    function approveProsumer_OwnerSpecific(uint256 _unApprovedProsumerID) public onlyOwner {\\r\\n        require(\\r\\n            _unApprovedProsumerID < unApprovedProsumers.length,\\r\\n            \\\"Invalid Unapproved Prosumer ID\\\"\\r\\n        );\\r\\n        require(\\r\\n            approved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] == false,\\r\\n            \\\"Prosumer Already approved by you\\\"\\r\\n        );\\r\\n\\r\\n        approved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] = true;\\r\\n\\r\\n        //If disapproved earlier then wants to approve\\r\\n        if (disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender]) {\\r\\n            disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] = false;\\r\\n        }\\r\\n\\r\\n        //check if approval > unapproval\\r\\n\\r\\n        if (_getApprovalCount(_unApprovedProsumerID) >= required) {\\r\\n            // console.log(\\\"I am adding the prosumer--- required it gets-\\\",_getApprovalCount(_unApprovedProsumerID));\\r\\n            //if yes then remove him from unapprove array and add him to approved prosumer array\\r\\n            unApprovedProsumers[_unApprovedProsumerID]._approved = true; //Set approved Flag = true\\r\\n            unApprovedProsumers[_unApprovedProsumerID]._prosumerID = ApprovedProsumers.length + 1; //Set Prosumer ID\\r\\n            isProsumer[unApprovedProsumers[_unApprovedProsumerID]._address] = true;\\r\\n            ApprovedProsumers.push(unApprovedProsumers[_unApprovedProsumerID]);\\r\\n            deleteElementFrom_UnApprovedProsumers(_unApprovedProsumerID);\\r\\n\\r\\n            /*Store the prosumers in the Maps*/\\r\\n            prosumerAddress[ApprovedProsumers.length] = ApprovedProsumers[\\r\\n                ApprovedProsumers.length - 1\\r\\n            ]._address;\\r\\n            prosumerID[ApprovedProsumers[ApprovedProsumers.length - 1]._address] = ApprovedProsumers\\r\\n                .length;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //--> 4. Disapprove Prosumer\\r\\n    function DisApproveProsumer_OwnerSpecific(uint256 _unApprovedProsumerID) public onlyOwner {\\r\\n        require(\\r\\n            _unApprovedProsumerID < unApprovedProsumers.length,\\r\\n            \\\"Invalid Unapproved Prosumer ID\\\"\\r\\n        );\\r\\n        require(\\r\\n            disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] == false,\\r\\n            \\\"Prosumer Already disapproved by you\\\"\\r\\n        );\\r\\n\\r\\n        disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] = true;\\r\\n\\r\\n        //If approved earlier then disapprove\\r\\n        if (disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender]) {\\r\\n            approved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] = false;\\r\\n        }\\r\\n\\r\\n        if (_getDisApprovalCount(_unApprovedProsumerID) > required) {\\r\\n            //if yes then remove him from unapprove array & don't store in approved array\\r\\n            deleteElementFrom_UnApprovedProsumers(_unApprovedProsumerID);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //-->5. Witdhraw Funds (Pending , send funds equally to all prosumer)  //Can only be called when Transaction array will be zero.\\r\\n    function withdrawFees() public onlyOwner {\\r\\n        require(Transaction.length == 0, \\\"First process all Transaction\\\"); //Otherwise all consumer money will be withdrawn to owners.\\r\\n        uint256 euqiBalance = address(this).balance / owners.length;\\r\\n\\r\\n        for (uint256 i = 0; i < owners.length; i++) {\\r\\n            (bool callSuccess, ) = payable(owners[i]).call{value: euqiBalance}(\\\"\\\");\\r\\n            require(callSuccess, \\\"Call Failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //--> HIDDEN FUNCTION (Only created for easy demonstration of Project), Not reccomended in Production\\r\\n    function removeProsumer() public onlyOwner {\\r\\n        address lastProsumer = prosumerAddress[ApprovedProsumers.length];\\r\\n        delete prosumerAddress[ApprovedProsumers.length];\\r\\n\\r\\n        //Remove last element from ApprovedProsumers Array\\r\\n        ApprovedProsumers.pop();\\r\\n\\r\\n        delete prosumerID[lastProsumer];\\r\\n    }\\r\\n\\r\\n    //-->^^^^^^^^^^^^^^^^^^^^^^^^ Process Trade ^^^^^^^^^^^^^^^^^^^^\\r\\n    function processTrade() public onlyOwner {\\r\\n        //Designed to process multiple Trade with a single click\\r\\n        require(Transaction.length != 0, \\\"No pending Transaction to execute\\\");\\r\\n        for (uint256 i = 0; i < Transaction.length; i++) {\\r\\n            _transfer(escrowAccount, Transaction[i]._consumer, Transaction[i]._consumerEnergyNeed);\\r\\n            (bool callSuccess, ) = payable(Transaction[i]._producer).call{\\r\\n                value: Transaction[i]._producerPaybleAmount\\r\\n            }(\\\"\\\"); //Transfering energy tokens to the producer\\r\\n            require(callSuccess, \\\"Call failed\\\");\\r\\n        }\\r\\n\\r\\n        delete Transaction; //Empty the pending Transaction array after all the transaction processed\\r\\n    }\\r\\n\\r\\n    function viewEscrowBalance() public view returns (uint256, uint256) {\\r\\n        return (address(this).balance, balanceOf(escrowAccount));\\r\\n    }\\r\\n\\r\\n    /********************PROSUMER FUNCTION**********************************/\\r\\n\\r\\n    function isRequested() internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < unApprovedProsumers.length; i++) {\\r\\n            if (msg.sender == unApprovedProsumers[i]._address) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function req_Registration(uint256 _aadharNo) public payable {\\r\\n        require(msg.value >= regFee, \\\"Registration Failed, Insufficient Fee\\\");\\r\\n        require(!isProsumer[msg.sender], \\\"You are already a Prosumer in the Network\\\");\\r\\n        require(!isRequested(), \\\"You have already requested for Registration\\\");\\r\\n\\r\\n        uint256 digitCheck = _aadharNo;\\r\\n        uint256 digits = 0;\\r\\n\\r\\n        while (digitCheck != 0) {\\r\\n            digitCheck /= 10;\\r\\n            digits++;\\r\\n        }\\r\\n\\r\\n        require(digits == 12, \\\"Enter a 12 digit Aadhar No.\\\");\\r\\n\\r\\n        //Create a prosumer object\\r\\n        prosumer memory _prosumer = prosumer({\\r\\n            _prosumerID: 0,\\r\\n            _address: msg.sender,\\r\\n            _aadharId: _aadharNo,\\r\\n            _approved: false,\\r\\n            _energyUnitPriceUSD: 0,\\r\\n            _energyUnitPriceMatic: 0,\\r\\n            _stakedEnergyBalance: 0\\r\\n        });\\r\\n\\r\\n        //Push the prosumer object to unApprovedProsumerArray\\r\\n        unApprovedProsumers.push(_prosumer);\\r\\n    }\\r\\n\\r\\n    function getAllPendingTxn()public view returns(Txn[] memory){\\r\\n        return Transaction;\\r\\n    }\\r\\n\\r\\n    /*-------------------Producer--------------------------------------------------------------*/\\r\\n\\r\\n    uint256 EnergyUnitPrice_usd;\\r\\n    uint256 EnergyUnitPrice_matic;\\r\\n\\r\\n    function setUnitPrice(uint256 price) internal onlyProsumer returns (uint256) {\\r\\n        /* New Approach - Take Price input as 1e16 */\\r\\n\\r\\n        EnergyUnitPrice_usd = price;\\r\\n        uint256 latestMaticPrice = uint(getLatestPrice());\\r\\n        EnergyUnitPrice_matic = (price / latestMaticPrice) * 1e10;\\r\\n        /*------- 1e16/1e8 * 1e10 = 1e18 -----------------------*/\\r\\n        return EnergyUnitPrice_matic;\\r\\n    }\\r\\n\\r\\n    function advert(\\r\\n        uint256 unitEnergyPrice,\\r\\n        uint256 excessEnergyToken\\r\\n    ) public onlyProsumer returns (uint256) {\\r\\n\\r\\n        require(ApprovedProsumers[prosumerID[msg.sender]-1]._stakedEnergyBalance==0, \\\"You have Already Staked Energy\\\");\\r\\n\\r\\n        transfer(escrowAccount, excessEnergyToken);\\r\\n\\r\\n        uint256 ad_placerID = prosumerID[msg.sender];\\r\\n\\r\\n        ApprovedProsumers[ad_placerID - 1]._energyUnitPriceUSD = unitEnergyPrice;\\r\\n        ApprovedProsumers[ad_placerID - 1]._energyUnitPriceMatic = (setUnitPrice(unitEnergyPrice));\\r\\n        ApprovedProsumers[ad_placerID - 1]._stakedEnergyBalance = excessEnergyToken;\\r\\n\\r\\n        return ad_placerID;\\r\\n    }\\r\\n\\r\\n    function mySetUnitPrice_Matic() public view onlyProsumer returns (uint256) {\\r\\n        return ApprovedProsumers[prosumerID[msg.sender] - 1]._energyUnitPriceMatic;\\r\\n    }\\r\\n\\r\\n    function mySetUnitPrice_USD() public view onlyProsumer returns (uint256) {\\r\\n        return ApprovedProsumers[prosumerID[msg.sender] - 1]._energyUnitPriceUSD;\\r\\n    }\\r\\n\\r\\n    //mint  TODO:(Needs overriding, because now any user can access the default and mint function)\\r\\n    function produceEnergy(uint256 energyProduced) public onlyProsumer {\\r\\n        _mint(msg.sender, energyProduced);\\r\\n    }\\r\\n\\r\\n    //burn\\r\\n    function burnEnergy(uint256 energyBurned) public onlyProsumer {\\r\\n        _burn(msg.sender, energyBurned);\\r\\n    }\\r\\n\\r\\n    /*-------------------Consumer--------------------------------------------------------------*/\\r\\n\\r\\n    function bid(uint256 producerID, uint256 energy_need) public payable onlyProsumer {\\r\\n        uint256 MinPayableAmount = ApprovedProsumers[producerID - 1]._energyUnitPriceMatic *\\r\\n            energy_need;\\r\\n        require(msg.value >= MinPayableAmount, \\\"Didn't send enough Matic!\\\");\\r\\n        require(\\r\\n            energy_need <= ApprovedProsumers[producerID - 1]._stakedEnergyBalance,\\r\\n            \\\"Selected Producer do have enough Enough Energy Balance\\\"\\r\\n        );\\r\\n\\r\\n        Txn memory _txn = Txn({\\r\\n            _producer: prosumerAddress[producerID],\\r\\n            _consumer: msg.sender,\\r\\n            _producerID: producerID,\\r\\n            _consumerID: prosumerID[msg.sender],\\r\\n            _consumerEnergyNeed: energy_need,\\r\\n            _producerUnitPriceUSD:ApprovedProsumers[producerID - 1]._energyUnitPriceUSD,\\r\\n            _producerUnitPriceMATIC: ApprovedProsumers[producerID - 1]._energyUnitPriceMatic,\\r\\n            _producerPaybleAmount: MinPayableAmount\\r\\n        });\\r\\n\\r\\n        Transaction.push(_txn);\\r\\n\\r\\n        ApprovedProsumers[producerID - 1]._stakedEnergyBalance =\\r\\n            ApprovedProsumers[producerID - 1]._stakedEnergyBalance -\\r\\n            energy_need;\\r\\n    }\\r\\n\\r\\n    function viewMaticBalance() public view returns (uint256) {\\r\\n        return msg.sender.balance;\\r\\n    }\\r\\n\\r\\n    function viewEnergyBalance() public view returns (uint256) {\\r\\n        return balanceOf(msg.sender);\\r\\n    }\\r\\n\\r\\n    /****************Modifiers************/\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner[msg.sender], \\\"Not Owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyProsumer() {\\r\\n        require(isProsumer[msg.sender], \\\"Not Prosumer\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x926f0f4539a07c01f276d19f1084a45ae152ae6cd52ccfbe492430ae2f3431bc\",\"license\":\"UNLICENSED\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract PriceConverter {\\r\\n    AggregatorV3Interface internal priceFeed;\\r\\n\\r\\n    /**\\r\\n     * Network: Polygon Mumbai\\r\\n     * Aggregator: MATIC/USD\\r\\n     * Address: 0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada\\r\\n     */\\r\\n    constructor() {\\r\\n        priceFeed = AggregatorV3Interface(0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the latest price\\r\\n     */\\r\\n    function getLatestPrice() public view returns (int) {\\r\\n        (\\r\\n            ,\\r\\n            /*uint80 roundID*/ int price /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\\r\\n            ,\\r\\n            ,\\r\\n\\r\\n        ) = priceFeed.latestRoundData();\\r\\n        return price;\\r\\n    }\\r\\n}\\r\\n\\r\\n// $ 1.14973259\\r\\n\",\"keccak256\":\"0x09d0ff105733ae98f85fd50568b9b9e97de5d6bfa3f67d5f44047cb18a5c2515\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061031d5760003560e01c806383ae0367116101a5578063a457c2d7116100ec578063e514317611610095578063f2fde38b1161006f578063f2fde38b14610966578063f4b1604514610986578063f85bae78146109c1578063fdbd2e8b146109fc57600080fd5b8063e51431761461091c578063e706d56814610931578063e814db591461094657600080fd5b8063dc8452cd116100c6578063dc8452cd146108ab578063dd62ed3e146108c1578063e4f6ea881461090757600080fd5b8063a457c2d71461084b578063a9059cbb1461086b578063c7a7275e1461088b57600080fd5b80638fff20f31161014e5780639c01a6df116101285780639c01a6df146107f85780639dc29fac146108185780639ff341151461083857600080fd5b80638fff20f3146107ad57806395d89b41146107c357806396acb79a146107d857600080fd5b80638e2efc011161017f5780638e2efc01146107405780638ec90e5e146107625780638fac63711461077757600080fd5b806383ae0367146106f55780638bda812f146107175780638e15f4731461072b57600080fd5b80633950935111610269578063598647f81161021257806370a08231116101ec57806370a082311461067f5780637b78bc6b146106b55780637fb400f9146106d557600080fd5b8063598647f8146105f1578063612536fc14610604578063677f502e1461061957600080fd5b80634ca46d19116102435780634ca46d191461055f5780634ec9dd8d1461057f5780634ef8ab771461059457600080fd5b8063395093511461050a57806340c10f191461052a578063476343ee1461054a57600080fd5b80630e264f80116102cb5780632f54bf6e116102a55780632f54bf6e1461047a578063313ce567146104aa5780633628c333146104c657600080fd5b80630e264f801461043057806318160ddd1461044557806323b872dd1461045a57600080fd5b806306fdde03116102fc57806306fdde03146103bc578063095ea7b3146103de5780630b6d83e21461040e57600080fd5b80621cfdce14610322578063025e7c271461036257806306ed1f801461039a575b600080fd5b34801561032e57600080fd5b5061034f61033d366004613888565b600d6020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561036e57600080fd5b5061038261037d3660046138aa565b610a2c565b6040516001600160a01b039091168152602001610359565b3480156103a657600080fd5b506103af610a56565b60405161035991906138c3565b3480156103c857600080fd5b506103d1610c63565b6040516103599190613950565b3480156103ea57600080fd5b506103fe6103f93660046139a5565b610cf5565b6040519015158152602001610359565b34801561041a57600080fd5b5061042e6104293660046138aa565b610d0d565b005b34801561043c57600080fd5b5061034f610d68565b34801561045157600080fd5b5060025461034f565b34801561046657600080fd5b506103fe6104753660046139cf565b610dfc565b34801561048657600080fd5b506103fe610495366004613888565b60076020526000908152604090205460ff1681565b3480156104b657600080fd5b5060405160128152602001610359565b3480156104d257600080fd5b506104f5600a546001600160a01b03166000908152602081905260409020544791565b60408051928352602083019190915201610359565b34801561051657600080fd5b506103fe6105253660046139a5565b610e20565b34801561053657600080fd5b5061042e6105453660046139a5565b610e5f565b34801561055657600080fd5b5061042e610e6d565b34801561056b57600080fd5b5061042e61057a3660046138aa565b610ff9565b34801561058b57600080fd5b5061034f611292565b3480156105a057600080fd5b506105b46105af3660046138aa565b611326565b604080519788526001600160a01b039096166020880152948601939093529015156060850152608084015260a083015260c082015260e001610359565b61042e6105ff366004613a0b565b611383565b34801561061057600080fd5b506103af6117b8565b34801561062557600080fd5b506106396106343660046138aa565b611865565b604080516001600160a01b03998a168152989097166020890152958701949094526060860192909252608085015260a084015260c083015260e082015261010001610359565b34801561068b57600080fd5b5061034f61069a366004613888565b6001600160a01b031660009081526020819052604090205490565b3480156106c157600080fd5b506103d16106d0366004613888565b6118c7565b3480156106e157600080fd5b5061042e6106f03660046138aa565b611a1a565b34801561070157600080fd5b503360009081526020819052604090205461034f565b34801561072357600080fd5b50333161034f565b34801561073757600080fd5b5061034f611a72565b34801561074c57600080fd5b50610755611b06565b6040516103599190613a2d565b34801561076e57600080fd5b5061042e611bb5565b34801561078357600080fd5b506103826107923660046138aa565b600c602052600090815260409020546001600160a01b031681565b3480156107b957600080fd5b5061034f60095481565b3480156107cf57600080fd5b506103d1611e07565b3480156107e457600080fd5b5061034f6107f3366004613a0b565b611e16565b34801561080457600080fd5b506105b46108133660046138aa565b611fc1565b34801561082457600080fd5b5061042e6108333660046139a5565b611fd1565b61042e6108463660046138aa565b611fdb565b34801561085757600080fd5b506103fe6108663660046139a5565b61234f565b34801561087757600080fd5b506103fe6108863660046139a5565b6123f9565b34801561089757600080fd5b5061042e6108a63660046138aa565b612407565b3480156108b757600080fd5b5061034f60085481565b3480156108cd57600080fd5b5061034f6108dc366004613ab9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561091357600080fd5b506103af6128a0565b34801561092857600080fd5b5061042e612aa1565b34801561093d57600080fd5b506103af612b9a565b34801561095257600080fd5b5061042e6109613660046138aa565b612c85565b34801561097257600080fd5b5061042e610981366004613888565b612cd5565b34801561099257600080fd5b506103fe6109a1366004613ab9565b600f60209081526000928352604080842090915290825290205460ff1681565b3480156109cd57600080fd5b506103fe6109dc366004613ab9565b601060209081526000928352604080842090915290825290205460ff1681565b348015610a0857600080fd5b506103fe610a17366004613888565b600b6020526000908152604090205460ff1681565b60068181548110610a3c57600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526007602052604090205460609060ff16610aa95760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b60448201526064015b60405180910390fd5b60115460009067ffffffffffffffff811115610ac757610ac7613aec565b604051908082528060200260200182016040528015610b4357816020015b610b306040518060e001604052806000815260200160006001600160a01b03168152602001600081526020016000151581526020016000815260200160008152602001600081525090565b815260200190600190039081610ae55790505b50905060005b601154811015610c5d57600f600060118381548110610b6a57610b6a613b02565b6000918252602080832060016007909302018201546001600160a01b031684528381019490945260409283018220338352909352205460ff1615151415610c4b5760118181548110610bbe57610bbe613b02565b60009182526020918290206040805160e08101825260079093029091018054835260018101546001600160a01b031693830193909352600283015490820152600382015460ff161515606082015260048201546080820152600582015460a082015260069091015460c08201528251839083908110610c3f57610c3f613b02565b60200260200101819052505b80610c5581613b2e565b915050610b49565b50905090565b606060038054610c7290613b49565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9e90613b49565b8015610ceb5780601f10610cc057610100808354040283529160200191610ceb565b820191906000526020600020905b815481529060010190602001808311610cce57829003601f168201915b5050505050905090565b600033610d03818585612dbd565b5060019392505050565b336000908152600b602052604090205460ff16610d5b5760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610aa0565b610d653382612f16565b50565b336000908152600b602052604081205460ff16610db65760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610aa0565b336000908152600d6020526040902054600e90610dd590600190613b7e565b81548110610de557610de5613b02565b906000526020600020906007020160040154905090565b600033610e0a858285612fd5565b610e15858585613067565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190610d039082908690610e5a908790613b95565b612dbd565b610e698282612f16565b5050565b3360009081526007602052604090205460ff16610eb85760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610aa0565b60125415610f085760405162461bcd60e51b815260206004820152601d60248201527f46697273742070726f6365737320616c6c205472616e73616374696f6e0000006044820152606401610aa0565b600654600090610f189047613bad565b905060005b600654811015610e6957600060068281548110610f3c57610f3c613b02565b60009182526020822001546040516001600160a01b039091169185919081818185875af1925050503d8060008114610f90576040519150601f19603f3d011682016040523d82523d6000602084013e610f95565b606091505b5050905080610fe65760405162461bcd60e51b815260206004820152600b60248201527f43616c6c204661696c65640000000000000000000000000000000000000000006044820152606401610aa0565b5080610ff181613b2e565b915050610f1d565b3360009081526007602052604090205460ff166110445760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610aa0565b60115481106110955760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420556e617070726f7665642050726f73756d657220494400006044820152606401610aa0565b60106000601183815481106110ac576110ac613b02565b60009182526020808320600160079093020191909101546001600160a01b03168352828101939093526040918201812033825290925290205460ff161561115b5760405162461bcd60e51b815260206004820152602360248201527f50726f73756d657220416c726561647920646973617070726f7665642062792060448201527f796f7500000000000000000000000000000000000000000000000000000000006064820152608401610aa0565b6001601060006011848154811061117457611174613b02565b60009182526020808320600792909202909101600101546001600160a01b0316835282810193909352604091820181203382529092528120805460ff191692151592909217909155601180546010929190849081106111d5576111d5613b02565b60009182526020808320600160079093020191909101546001600160a01b03168352828101939093526040918201812033825290925290205460ff1615611277576000600f60006011848154811061122f5761122f613b02565b60009182526020808320600792909202909101600101546001600160a01b0316835282810193909352604091820181203382529092529020805460ff19169115159190911790555b60085461128382613254565b1115610d6557610d658161330f565b336000908152600b602052604081205460ff166112e05760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610aa0565b336000908152600d6020526040902054600e906112ff90600190613b7e565b8154811061130f5761130f613b02565b906000526020600020906007020160050154905090565b600e818154811061133657600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601549496506001600160a01b0390931694919360ff90911692919087565b336000908152600b602052604090205460ff166113d15760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610aa0565b600081600e6113e1600186613b7e565b815481106113f1576113f1613b02565b90600052602060002090600702016005015461140d9190613bcf565b90508034101561145f5760405162461bcd60e51b815260206004820152601960248201527f4469646e27742073656e6420656e6f756768204d6174696321000000000000006044820152606401610aa0565b600e61146c600185613b7e565b8154811061147c5761147c613b02565b9060005260206000209060070201600601548211156115035760405162461bcd60e51b815260206004820152603660248201527f53656c65637465642050726f647563657220646f206861766520656e6f75676860448201527f20456e6f75676820456e657267792042616c616e6365000000000000000000006064820152608401610aa0565b60408051610100810182526000858152600c6020908152838220546001600160a01b03168352338184018190528385018890528252600d90529182205460608201526080810184905260a08101600e61155d600188613b7e565b8154811061156d5761156d613b02565b9060005260206000209060070201600401548152602001600e6001876115939190613b7e565b815481106115a3576115a3613b02565b6000918252602080832060079290920290910160050154835291820185905260128054600180820183559190925283517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444600890930292830180546001600160a01b03199081166001600160a01b0393841617909155938501517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34458401805490951691161790925560408301517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344682015560608301517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344782015560808301517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344882015560a08301517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344982015560c08301517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344a82015560e08301517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344b909101559091508390600e906117549087613b7e565b8154811061176457611764613b02565b9060005260206000209060070201600601546117809190613b7e565b600e61178d600187613b7e565b8154811061179d5761179d613b02565b90600052602060002090600702016006018190555050505050565b6060600e805480602002602001604051908101604052809291908181526020016000905b8282101561185c5760008481526020908190206040805160e08101825260078602909201805483526001808201546001600160a01b031684860152600282015492840192909252600381015460ff161515606084015260048101546080840152600581015460a08401526006015460c083015290835290920191016117dc565b50505050905090565b6012818154811061187557600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b03968716985094909516959294919390929088565b3360009081526007602052604090205460609060ff166119155760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610aa0565b6001600160a01b0382166000908152600f6020908152604080832033845290915290205460ff161561197a57505060408051808201909152601181527f50726f73756d657220417070726f766564000000000000000000000000000000602082015290565b6001600160a01b038216600090815260106020908152604080832033845290915290205460ff16156119df57505060408051808201909152601481527f50726f73756d657220446973617070726f766564000000000000000000000000602082015290565b5060408051808201909152601981527f50726f73756d6572204e6f74205665726966696564205965740000000000000060208201525b919050565b336000908152600b602052604090205460ff16611a685760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610aa0565b610d6533826134f9565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611ac357600080fd5b505afa158015611ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afb9190613c08565b509195945050505050565b60606012805480602002602001604051908101604052809291908181526020016000905b8282101561185c57600084815260209081902060408051610100810182526008860290920180546001600160a01b039081168452600180830154909116848601526002820154928401929092526003810154606084015260048101546080840152600581015460a0840152600681015460c08401526007015460e08301529083529092019101611b2a565b3360009081526007602052604090205460ff16611c005760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610aa0565b601254611c755760405162461bcd60e51b815260206004820152602160248201527f4e6f2070656e64696e67205472616e73616374696f6e20746f2065786563757460448201527f65000000000000000000000000000000000000000000000000000000000000006064820152608401610aa0565b60005b601254811015611df857600a5460128054611cf7926001600160a01b0316919084908110611ca857611ca8613b02565b906000526020600020906008020160010160009054906101000a90046001600160a01b031660128481548110611ce057611ce0613b02565b906000526020600020906008020160040154613067565b600060128281548110611d0c57611d0c613b02565b6000918252602090912060089091020154601280546001600160a01b039092169184908110611d3d57611d3d613b02565b90600052602060002090600802016007015460405160006040518083038185875af1925050503d8060008114611d8f576040519150601f19603f3d011682016040523d82523d6000602084013e611d94565b606091505b5050905080611de55760405162461bcd60e51b815260206004820152600b60248201527f43616c6c206661696c65640000000000000000000000000000000000000000006044820152606401610aa0565b5080611df081613b2e565b915050611c78565b50611e05601260006137fb565b565b606060048054610c7290613b49565b336000908152600b602052604081205460ff16611e645760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610aa0565b336000908152600d6020526040902054600e90611e8390600190613b7e565b81548110611e9357611e93613b02565b906000526020600020906007020160060154600014611ef45760405162461bcd60e51b815260206004820152601e60248201527f596f75206861766520416c7265616479205374616b656420456e6572677900006044820152606401610aa0565b600a54611f0a906001600160a01b0316836123f9565b50336000908152600d602052604090205483600e611f29600184613b7e565b81548110611f3957611f39613b02565b906000526020600020906007020160040181905550611f578461365a565b600e611f64600184613b7e565b81548110611f7457611f74613b02565b600091825260209091206005600790920201015582600e611f96600184613b7e565b81548110611fa657611fa6613b02565b60009182526020909120600790910201600601559392505050565b6011818154811061133657600080fd5b610e6982826134f9565b6009543410156120535760405162461bcd60e51b815260206004820152602560248201527f526567697374726174696f6e204661696c65642c20496e73756666696369656e60448201527f74204665650000000000000000000000000000000000000000000000000000006064820152608401610aa0565b336000908152600b602052604090205460ff16156120d95760405162461bcd60e51b815260206004820152602960248201527f596f752061726520616c726561647920612050726f73756d657220696e20746860448201527f65204e6574776f726b00000000000000000000000000000000000000000000006064820152608401610aa0565b6120e16136de565b156121545760405162461bcd60e51b815260206004820152602b60248201527f596f75206861766520616c72656164792072657175657374656420666f72205260448201527f6567697374726174696f6e0000000000000000000000000000000000000000006064820152608401610aa0565b8060005b811561217d57612169600a83613bad565b91508061217581613b2e565b915050612158565b80600c146121cd5760405162461bcd60e51b815260206004820152601b60248201527f456e746572206120313220646967697420416164686172204e6f2e00000000006044820152606401610aa0565b50506040805160e08101825260008082523360208301908152928201938452606082018181526080830182815260a0840183815260c0850184815260118054600181018255955294517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6860079095029485015594517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c69840180546001600160a01b0319166001600160a01b0390921691909117905594517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6a830155517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6b8201805460ff191691151591909117905592517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6c84015590517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6d830155517f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6e90910155565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156123ec5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610aa0565b610e158286868403612dbd565b600033610d03818585613067565b3360009081526007602052604090205460ff166124525760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610aa0565b60115481106124a35760405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420556e617070726f7665642050726f73756d657220494400006044820152606401610aa0565b600f6000601183815481106124ba576124ba613b02565b60009182526020808320600160079093020191909101546001600160a01b03168352828101939093526040918201812033825290925290205460ff16156125435760405162461bcd60e51b815260206004820181905260248201527f50726f73756d657220416c726561647920617070726f76656420627920796f756044820152606401610aa0565b6001600f60006011848154811061255c5761255c613b02565b60009182526020808320600792909202909101600101546001600160a01b0316835282810193909352604091820181203382529092528120805460ff191692151592909217909155601180546010929190849081106125bd576125bd613b02565b60009182526020808320600160079093020191909101546001600160a01b03168352828101939093526040918201812033825290925290205460ff161561265f576000601060006011848154811061261757612617613b02565b60009182526020808320600792909202909101600101546001600160a01b0316835282810193909352604091820181203382529092529020805460ff19169115159190911790555b60085461266b82613745565b10610d655760016011828154811061268557612685613b02565b60009182526020909120600790910201600301805460ff1916911515919091179055600e546126b5906001613b95565b601182815481106126c8576126c8613b02565b9060005260206000209060070201600001819055506001600b6000601184815481106126f6576126f6613b02565b60009182526020808320600792909202909101600101546001600160a01b031683528201929092526040019020805460ff191691151591909117905560118054600e91908390811061274a5761274a613b02565b600091825260208083208454600181810187559585529190932060079283029093018054919092029092019182558281015492820180546001600160a01b0319166001600160a01b039094169390931790925560028083015490820155600380830154908201805460ff909216151560ff1990921691909117905560048083015490820155600580830154908201556006918201549101556127eb8161330f565b600e80546127fb90600190613b7e565b8154811061280b5761280b613b02565b600091825260208083206001600790930201820154600e80548552600c9092526040842080546001600160a01b0319166001600160a01b03909216919091179055805492600d9290919061285f9085613b7e565b8154811061286f5761286f613b02565b60009182526020808320600160079093020191909101546001600160a01b0316835282019290925260400190205550565b3360009081526007602052604090205460609060ff166128ee5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610aa0565b60115460009067ffffffffffffffff81111561290c5761290c613aec565b60405190808252806020026020018201604052801561298857816020015b6129756040518060e001604052806000815260200160006001600160a01b03168152602001600081526020016000151581526020016000815260200160008152602001600081525090565b81526020019060019003908161292a5790505b50905060005b601154811015610c5d57600f6000601183815481106129af576129af613b02565b60009182526020808320600160079093020191909101546001600160a01b03168352828101939093526040918201812033825290925290205460ff16612a8f5760118181548110612a0257612a02613b02565b60009182526020918290206040805160e08101825260079093029091018054835260018101546001600160a01b031693830193909352600283015490820152600382015460ff161515606082015260048201546080820152600582015460a082015260069091015460c08201528251839083908110612a8357612a83613b02565b60200260200101819052505b80612a9981613b2e565b91505061298e565b3360009081526007602052604090205460ff16612aec5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610aa0565b600e80546000908152600c6020526040902080546001600160a01b0319811690915581546001600160a01b03909116919080612b2a57612b2a613c58565b600082815260208082206007600019909401938402018281556001810180546001600160a01b03191690556002810183905560038101805460ff191690556004810183905560058101839055600601829055919092556001600160a01b03929092168152600d9091526040812055565b3360009081526007602052604090205460609060ff16612be85760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610aa0565b60118054604080516020808402820181019092528281529291906000908401821561185c5760008481526020908190206040805160e08101825260078602909201805483526001808201546001600160a01b031684860152600282015492840192909252600381015460ff161515606084015260048101546080840152600581015460a08401526006015460c083015290835290920191016117dc565b3360009081526007602052604090205460ff16612cd05760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610aa0565b600955565b3360009081526007602052604090205460ff16612d205760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610aa0565b60005b600654811015610e6957336001600160a01b031660068281548110612d4a57612d4a613b02565b6000918252602090912001546001600160a01b03161415612dab578160068281548110612d7957612d79613b02565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050565b80612db581613b2e565b915050612d23565b6001600160a01b038316612e385760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610aa0565b6001600160a01b038216612eb45760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610aa0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038216612f6c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610aa0565b8060026000828254612f7e9190613b95565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461306157818110156130545760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610aa0565b6130618484848403612dbd565b50505050565b6001600160a01b0383166130e35760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610aa0565b6001600160a01b03821661315f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610aa0565b6001600160a01b038316600090815260208190526040902054818110156131ee5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610aa0565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3613061565b6000805b60065481101561330957601060006011858154811061327957613279613b02565b60009182526020808320600160079093020191909101546001600160a01b03168352820192909252604001812060068054919291849081106132bd576132bd613b02565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156132f7576132f48183613b95565b91505b8061330181613b2e565b915050613258565b50919050565b3360009081526007602052604090205460ff1661335a5760405162461bcd60e51b81526020600482015260096024820152682737ba1027bbb732b960b91b6044820152606401610aa0565b60115481106133ab5760405162461bcd60e51b815260206004820181905260248201527f496e76616c696420756e617070726f76656450726f73756d657220496e6465786044820152606401610aa0565b805b6011546133bc90600190613b7e565b8110156134935760116133d0826001613b95565b815481106133e0576133e0613b02565b90600052602060002090600702016011828154811061340157613401613b02565b60009182526020909120825460079092020190815560018083015490820180546001600160a01b0319166001600160a01b0390921691909117905560028083015490820155600380830154908201805460ff909216151560ff1990921691909117905560048083015490820155600580830154908201556006918201549101558061348b81613b2e565b9150506133ad565b5060118054806134a5576134a5613c58565b6000828152602081206007600019909301928302018181556001810180546001600160a01b03191690556002810182905560038101805460ff19169055600481018290556005810182905560060155905550565b6001600160a01b0382166135755760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610aa0565b6001600160a01b038216600090815260208190526040902054818110156136045760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610aa0565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612f09565b336000908152600b602052604081205460ff166136a85760405162461bcd60e51b815260206004820152600c60248201526b2737ba10283937b9bab6b2b960a11b6044820152606401610aa0565b601382905560006136b7611a72565b90506136c38184613bad565b6136d2906402540be400613bcf565b60148190559392505050565b6000805b60115481101561373d57601181815481106136ff576136ff613b02565b60009182526020909120600790910201600101546001600160a01b031633141561372b57600191505090565b8061373581613b2e565b9150506136e2565b506000905090565b6000805b60065481101561330957600f60006011858154811061376a5761376a613b02565b60009182526020808320600160079093020191909101546001600160a01b03168352820192909252604001812060068054919291849081106137ae576137ae613b02565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156137e957816137e581613b2e565b9250505b806137f381613b2e565b915050613749565b5080546000825560080290600052602060002090810190610d6591905b8082111561386d5780546001600160a01b031990811682556001820180549091169055600060028201819055600382018190556004820181905560058201819055600682018190556007820155600801613818565b5090565b80356001600160a01b0381168114611a1557600080fd5b60006020828403121561389a57600080fd5b6138a382613871565b9392505050565b6000602082840312156138bc57600080fd5b5035919050565b602080825282518282018190526000919060409081850190868401855b8281101561394357815180518552868101516001600160a01b03168786015285810151868601526060808201511515908601526080808201519086015260a0808201519086015260c0908101519085015260e090930192908501906001016138e0565b5091979650505050505050565b600060208083528351808285015260005b8181101561397d57858101830151858201604001528201613961565b8181111561398f576000604083870101525b50601f01601f1916929092016040019392505050565b600080604083850312156139b857600080fd5b6139c183613871565b946020939093013593505050565b6000806000606084860312156139e457600080fd5b6139ed84613871565b92506139fb60208501613871565b9150604084013590509250925092565b60008060408385031215613a1e57600080fd5b50508035926020909101359150565b602080825282518282018190526000919060409081850190868401855b8281101561394357815180516001600160a01b0390811686528782015116878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0808201519086015260e090810151908501526101009093019290850190600101613a4a565b60008060408385031215613acc57600080fd5b613ad583613871565b9150613ae360208401613871565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415613b4257613b42613b18565b5060010190565b600181811c90821680613b5d57607f821691505b6020821081141561330957634e487b7160e01b600052602260045260246000fd5b600082821015613b9057613b90613b18565b500390565b60008219821115613ba857613ba8613b18565b500190565b600082613bca57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613be957613be9613b18565b500290565b805169ffffffffffffffffffff81168114611a1557600080fd5b600080600080600060a08688031215613c2057600080fd5b613c2986613bee565b9450602086015193506040860151925060608601519150613c4c60808701613bee565b90509295509295909350565b634e487b7160e01b600052603160045260246000fdfea264697066735822122003ce5bf74fa5dbd17db48d8c56451d42f34dea78601a0b106de627919aad88c864736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLatestPrice()": {
        "notice": "Returns the latest price"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 67,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 69,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 71,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2140,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 808,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "owners",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 812,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "isOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 814,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "required",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 816,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "regFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 818,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "escrowAccount",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 837,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "isProsumer",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 841,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "prosumerAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 845,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "prosumerID",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 849,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "ApprovedProsumers",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(prosumer)833_storage)dyn_storage"
      },
      {
        "astId": 855,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "approved",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 861,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "disapproved",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 865,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "unApprovedProsumers",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_struct(prosumer)833_storage)dyn_storage"
      },
      {
        "astId": 886,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "Transaction",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(Txn)882_storage)dyn_storage"
      },
      {
        "astId": 1825,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "EnergyUnitPrice_usd",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 1827,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "EnergyUnitPrice_matic",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Txn)882_storage)dyn_storage": {
        "base": "t_struct(Txn)882_storage",
        "encoding": "dynamic_array",
        "label": "struct EnergyTrade.Txn[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(prosumer)833_storage)dyn_storage": {
        "base": "t_struct(prosumer)833_storage",
        "encoding": "dynamic_array",
        "label": "struct EnergyTrade.prosumer[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Txn)882_storage": {
        "encoding": "inplace",
        "label": "struct EnergyTrade.Txn",
        "members": [
          {
            "astId": 867,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_producer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 869,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_consumer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 871,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_producerID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 873,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_consumerID",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 875,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_consumerEnergyNeed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 877,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_producerUnitPriceUSD",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 879,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_producerUnitPriceMATIC",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 881,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_producerPaybleAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(prosumer)833_storage": {
        "encoding": "inplace",
        "label": "struct EnergyTrade.prosumer",
        "members": [
          {
            "astId": 820,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_prosumerID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 822,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_address",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 824,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_aadharId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 826,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_approved",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 828,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_energyUnitPriceUSD",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 830,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_energyUnitPriceMatic",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 832,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_stakedEnergyBalance",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
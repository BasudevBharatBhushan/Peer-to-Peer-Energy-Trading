{
  "address": "0x1BD178D62Eee4e7871B7B02EA36eE33B54FA6De6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ApprovedProsumers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_prosumerID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_aadharId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceMatic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakedEnergyBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unApprovedProsumerID",
          "type": "uint256"
        }
      ],
      "name": "DisApproveProsumer_OwnerSpecific",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Transaction",
      "outputs": [
        {
          "internalType": "address",
          "name": "_producer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_producerID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_consumerID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_consumerEnergyNeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_producerUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_producerPaybleAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "unitEnergyPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "excessEnergyToken",
          "type": "uint256"
        }
      ],
      "name": "advert",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unApprovedProsumerID",
          "type": "uint256"
        }
      ],
      "name": "approveProsumer_OwnerSpecific",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "producerID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "energy_need",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "energyBurned",
          "type": "uint256"
        }
      ],
      "name": "burnEnergy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "disapproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isProsumer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mySetUnitPrice_Matic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mySetUnitPrice_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "processTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "energyProduced",
          "type": "uint256"
        }
      ],
      "name": "produceEnergy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prosumerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "prosumerID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "regFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aadharNo",
          "type": "uint256"
        }
      ],
      "name": "req_Registration",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_regFee",
          "type": "uint256"
        }
      ],
      "name": "setRegFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "showApprovalList_OwnerSpecific",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_prosumerID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_aadharId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceMatic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakedEnergyBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnergyTrade.prosumer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_unapprovedProsumerAddress",
          "type": "address"
        }
      ],
      "name": "showApprovalStatus_OwnerSpecific",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "showUnapprovalList_OwnerSpecific",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_prosumerID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_aadharId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceMatic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakedEnergyBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnergyTrade.prosumer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "show_Approved_Prosumers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_prosumerID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_aadharId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceMatic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakedEnergyBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnergyTrade.prosumer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "show_Unapproved_Prosumers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_prosumerID",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_aadharId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_energyUnitPriceMatic",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_stakedEnergyBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct EnergyTrade.prosumer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unApprovedProsumers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_prosumerID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_aadharId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_energyUnitPriceMatic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakedEnergyBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewEnergyBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewEscrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewMaticBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb10a36e666c0dbcbadcf509e370382e700709c9eaa117652d861731aa9ed6039",
  "receipt": {
    "to": null,
    "from": "0x85b3dB26424a88e7C1319E40a6324d64Acf1fFA2",
    "contractAddress": "0x1BD178D62Eee4e7871B7B02EA36eE33B54FA6De6",
    "transactionIndex": 12,
    "gasUsed": "5585966",
    "logsBloom": "0x
    "blockHash": "0x75fe899a068baf29cc86e9cfe325775c1aeb9aa0d2c3660993ef7d9699fe3a82",
    "transactionHash": "0xb10a36e666c0dbcbadcf509e370382e700709c9eaa117652d861731aa9ed6039",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 29496013,
        "transactionHash": "0xb10a36e666c0dbcbadcf509e370382e700709c9eaa117652d861731aa9ed6039",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000085b3db26424a88e7c1319e40a6324d64acf1ffa2",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001cff0a0ec5d3a40000000000000000000000000000000000000000000000007306f0ff627275f700000000000000000000000000000000000000000000180bc60075fb990f4f3200000000000000000000000000000000000000000000000072e9f1f553aca25300000000000000000000000000000000000000000000180bc61d7505a7d522d6",
        "logIndex": 44,
        "blockHash": "0x75fe899a068baf29cc86e9cfe325775c1aeb9aa0d2c3660993ef7d9699fe3a82"
      }
    ],
    "blockNumber": 29496013,
    "cumulativeGasUsed": "8463377",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x85b3dB26424a88e7C1319E40a6324d64Acf1fFA2",
      "0xaA644EfCDFC1Adaf3CAb69Ae683638f4705F4C81",
      "0xB6E7F3234C709B6C96a60D14A85d41FADDd22FDA"
    ],
    2
  ],
  "numDeployments": 1,
  "solcInputHash": "a806a3554c3a3f5b34539635b43e12cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ApprovedProsumers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unApprovedProsumerID\",\"type\":\"uint256\"}],\"name\":\"DisApproveProsumer_OwnerSpecific\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Transaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_producer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_producerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_consumerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_consumerEnergyNeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_producerUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_producerPaybleAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unitEnergyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"excessEnergyToken\",\"type\":\"uint256\"}],\"name\":\"advert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unApprovedProsumerID\",\"type\":\"uint256\"}],\"name\":\"approveProsumer_OwnerSpecific\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"producerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"energy_need\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"energyBurned\",\"type\":\"uint256\"}],\"name\":\"burnEnergy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disapproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isProsumer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mySetUnitPrice_Matic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mySetUnitPrice_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"energyProduced\",\"type\":\"uint256\"}],\"name\":\"produceEnergy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prosumerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prosumerID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aadharNo\",\"type\":\"uint256\"}],\"name\":\"req_Registration\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_regFee\",\"type\":\"uint256\"}],\"name\":\"setRegFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showApprovalList_OwnerSpecific\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct EnergyTrade.prosumer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unapprovedProsumerAddress\",\"type\":\"address\"}],\"name\":\"showApprovalStatus_OwnerSpecific\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showUnapprovalList_OwnerSpecific\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct EnergyTrade.prosumer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"show_Approved_Prosumers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct EnergyTrade.prosumer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"show_Unapproved_Prosumers\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct EnergyTrade.prosumer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unApprovedProsumers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_prosumerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_aadharId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_energyUnitPriceMatic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakedEnergyBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewEnergyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewEscrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewMaticBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLatestPrice()\":{\"notice\":\"Returns the latest price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnergyTrade.sol\":\"EnergyTrade\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/EnergyToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Energy_Token is ERC20{\\n    /*\\n        Initial Supply is 50 ,- 50 WEI\\n        Initial supply 50e18\\n        or, 50*10**18\\n    */\\n    constructor () ERC20(\\\"Enery Token\\\" , \\\"UNIT\\\"){}\\n\\n    function mint(address to, uint256 value)external{\\n        _mint(to, value);\\n    }\\n\\n    function burn(address to, uint256 value)external{\\n        _burn(to, value);\\n    }\\n    \\n\\n}\",\"keccak256\":\"0x884386c6e9eed0e26d2c62e5ec74232b5b7ed3fbf770e5d999e9ba8bfcc7ca12\",\"license\":\"UNLICENSED\"},\"contracts/EnergyTrade.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./EnergyToken.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract EnergyTrade is Energy_Token, PriceConverter {\\r\\n    /*************Global Variables************/\\r\\n\\r\\n    /*-------Owner Variables-------------------------*/\\r\\n\\r\\n    address[] public owners; //Array to store all the owners in the Network\\r\\n    mapping(address => bool) public isOwner;\\r\\n    uint256 public required; //Min Owners required for Approval\\r\\n    uint256 public regFee; //Reg Fee set by the owner, to add prosumers in the Network\\r\\n    address escrowAccount; //Address of the Deployed Smart Contract\\r\\n\\r\\n    /*-----------------------------------------------------------------------------------------------*/\\r\\n\\r\\n    /*-------Prosumer Variables-------------------------*/\\r\\n\\r\\n    struct prosumer {\\r\\n        uint256 _prosumerID;\\r\\n        address _address;\\r\\n        uint256 _aadharId; //12 digit\\r\\n        bool _approved;\\r\\n        uint256 _energyUnitPriceUSD;\\r\\n        uint256 _energyUnitPriceMatic;\\r\\n        uint256 _stakedEnergyBalance;\\r\\n    }\\r\\n    mapping(address => bool) public isProsumer;\\r\\n\\r\\n    /* Created These Maps to optimise Gas */\\r\\n    mapping(uint256 => address) public prosumerAddress;\\r\\n    mapping(address => uint256) public prosumerID;\\r\\n\\r\\n    prosumer[] public ApprovedProsumers;\\r\\n\\r\\n    mapping(address => mapping(address => bool)) public approved; //address1 = unapprovedProsumer address, address2 = address Of Owner, bool\\r\\n    mapping(address => mapping(address => bool)) public disapproved; //address1 = unapprovedProsumer address, address2 = address Of Owner, bool\\r\\n\\r\\n    //--> Pending States before Approval\\r\\n\\r\\n    prosumer[] public unApprovedProsumers;\\r\\n\\r\\n    struct Txn {\\r\\n        address _producer;\\r\\n        address _consumer;\\r\\n        uint256 _producerID;\\r\\n        uint256 _consumerID;\\r\\n        uint256 _consumerEnergyNeed;\\r\\n        uint256 _producerUnitPrice; //MATIC\\r\\n        uint256 _producerPaybleAmount;\\r\\n    }\\r\\n\\r\\n    Txn[] public Transaction;\\r\\n\\r\\n    /*-----------------------------------------------------------------------------------------------*/\\r\\n\\r\\n    /*-----------Transaction Variables----------------------------------------------*/\\r\\n\\r\\n    /****************Constructor************/\\r\\n\\r\\n    constructor(address[] memory _owners, uint _required) {\\r\\n        //We will pass multiple owners & set a particular requirement number of apporvals needed\\r\\n\\r\\n        require(_owners.length > 0, \\\"Owners Required\\\");\\r\\n        require(_required > 0 && required <= _owners.length, \\\"Invalid required number of owners\\\");\\r\\n\\r\\n        for (uint i; i < _owners.length; i++) {\\r\\n            address owner = _owners[i];\\r\\n            require(owner != address(0), \\\"invalid owner\\\");\\r\\n            require(!isOwner[owner], \\\"Owner is not unique\\\");\\r\\n\\r\\n            isOwner[owner] = true;\\r\\n            owners.push(owner);\\r\\n        }\\r\\n\\r\\n        required = _required;\\r\\n        escrowAccount = address(this);\\r\\n    }\\r\\n\\r\\n    /*-----------------------------------------------------------------------------------------------*/\\r\\n\\r\\n    /********************ESCROW FUNCTIONS**********************************/\\r\\n\\r\\n    //--> 1. Set Registration Fee\\r\\n\\r\\n    function setRegFee(uint256 _regFee) public onlyOwner {\\r\\n        regFee = _regFee;\\r\\n    }\\r\\n\\r\\n    //--> 2. Verify Details of Unapproved Prosumer\\r\\n\\r\\n    //-->2.1 Internal Functions\\r\\n\\r\\n    function _getApprovalCount(uint256 _unApprovedProsumerID) private view returns (uint256 count) {\\r\\n        for (uint256 i = 0; i < owners.length; i++) {\\r\\n            if (approved[unApprovedProsumers[_unApprovedProsumerID]._address][owners[i]]) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    function _getDisApprovalCount(\\r\\n        uint256 _unApprovedProsumerID\\r\\n    ) private view returns (uint256 count) {\\r\\n        for (uint256 i = 0; i < owners.length; i++) {\\r\\n            if (disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][owners[i]]) {\\r\\n                count += i;\\r\\n            }\\r\\n        }\\r\\n        return count;\\r\\n    }\\r\\n\\r\\n    function deleteElementFrom_UnApprovedProsumers(\\r\\n        uint256 _unApprovedProsumerID\\r\\n    ) internal onlyOwner {\\r\\n        require(\\r\\n            _unApprovedProsumerID < unApprovedProsumers.length,\\r\\n            \\\"Invalid unapprovedProsumer Index\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = _unApprovedProsumerID; i < unApprovedProsumers.length - 1; i++) {\\r\\n            unApprovedProsumers[i] = unApprovedProsumers[i + 1];\\r\\n        }\\r\\n        unApprovedProsumers.pop();\\r\\n    }\\r\\n\\r\\n    /*-----------------------------------------------------------------------------------------------*/\\r\\n\\r\\n    //-->2.2 Show all Approved or Unapproved Prosumer\\r\\n\\r\\n    function show_Unapproved_Prosumers() public view onlyOwner returns (prosumer[] memory) {\\r\\n        return unApprovedProsumers;\\r\\n    }\\r\\n\\r\\n    function show_Approved_Prosumers() public view returns (prosumer[] memory) {\\r\\n        //Public Function anybody can call\\r\\n        return ApprovedProsumers;\\r\\n    }\\r\\n\\r\\n    //-->2.3 Approval Status [Owner Specific]\\r\\n\\r\\n    function showApprovalStatus_OwnerSpecific(\\r\\n        address _unapprovedProsumerAddress\\r\\n    ) public view onlyOwner returns (string memory) {\\r\\n        if (approved[_unapprovedProsumerAddress][msg.sender]) {\\r\\n            return (\\\"Prosumer Approved\\\");\\r\\n        } else if (disapproved[_unapprovedProsumerAddress][msg.sender]) {\\r\\n            return (\\\"Prosumer Disapproved\\\");\\r\\n        } else {\\r\\n            return (\\\"Prosumer Not Approved Yet\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //--> 2.4 Show UnApproved Prosumer [Owner Specific]\\r\\n\\r\\n    function showUnapprovalList_OwnerSpecific() public view onlyOwner returns (prosumer[] memory) {\\r\\n        prosumer[] memory pr = new prosumer[](unApprovedProsumers.length);\\r\\n        for (uint256 i = 0; i < unApprovedProsumers.length; i++) {\\r\\n            if (approved[unApprovedProsumers[i]._address][msg.sender] == false) {\\r\\n                pr[i] = unApprovedProsumers[i];\\r\\n            }\\r\\n        }\\r\\n        return pr;\\r\\n    }\\r\\n\\r\\n    //--> 2.5 Show Approved Prosumer [Owner Specific]\\r\\n\\r\\n    function showApprovalList_OwnerSpecific() public view onlyOwner returns (prosumer[] memory) {\\r\\n        prosumer[] memory pr = new prosumer[](unApprovedProsumers.length);\\r\\n        for (uint256 i = 0; i < unApprovedProsumers.length; i++) {\\r\\n            if (approved[unApprovedProsumers[i]._address][msg.sender] == true) {\\r\\n                pr[i] = unApprovedProsumers[i];\\r\\n            }\\r\\n        }\\r\\n        return pr;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n- Once Prosumer is Approved in the Network, you cannot remove him.\\r\\n- Why? Because he has already gone through a verification process by multiple owners.\\r\\n- Though the function can be implemented in Future, if we feel the need of it\\r\\n*/\\r\\n\\r\\n    //--> 3. Approve Prosumer\\r\\n\\r\\n    function approveProsumer_OwnerSpecific(uint256 _unApprovedProsumerID) public onlyOwner {\\r\\n        require(\\r\\n            _unApprovedProsumerID < unApprovedProsumers.length,\\r\\n            \\\"Invalid Unapproved Prosumer ID\\\"\\r\\n        );\\r\\n        require(\\r\\n            approved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] == false,\\r\\n            \\\"Prosumer Already approved by you\\\"\\r\\n        );\\r\\n\\r\\n        approved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] = true;\\r\\n\\r\\n        //If disapproved earlier then wants to approve\\r\\n        if (disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender]) {\\r\\n            disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] = false;\\r\\n        }\\r\\n\\r\\n        //check if approval > unapproval\\r\\n\\r\\n        if (_getApprovalCount(_unApprovedProsumerID) >= required) {\\r\\n            // console.log(\\\"I am adding the prosumer--- required it gets-\\\",_getApprovalCount(_unApprovedProsumerID));\\r\\n            //if yes then remove him from unapprove array and add him to approved prosumer array\\r\\n            unApprovedProsumers[_unApprovedProsumerID]._approved = true; //Set approved Flag = true\\r\\n            unApprovedProsumers[_unApprovedProsumerID]._prosumerID = ApprovedProsumers.length + 1; //Set Prosumer ID\\r\\n            isProsumer[unApprovedProsumers[_unApprovedProsumerID]._address] = true;\\r\\n            ApprovedProsumers.push(unApprovedProsumers[_unApprovedProsumerID]);\\r\\n            deleteElementFrom_UnApprovedProsumers(_unApprovedProsumerID);\\r\\n\\r\\n            /*Store the prosumers in the Maps*/\\r\\n            prosumerAddress[ApprovedProsumers.length] = ApprovedProsumers[\\r\\n                ApprovedProsumers.length - 1\\r\\n            ]._address;\\r\\n            prosumerID[ApprovedProsumers[ApprovedProsumers.length - 1]._address] = ApprovedProsumers\\r\\n                .length;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //--> 4. Disapprove Prosumer\\r\\n    function DisApproveProsumer_OwnerSpecific(uint256 _unApprovedProsumerID) public onlyOwner {\\r\\n        require(\\r\\n            _unApprovedProsumerID < unApprovedProsumers.length,\\r\\n            \\\"Invalid Unapproved Prosumer ID\\\"\\r\\n        );\\r\\n        require(\\r\\n            disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] == false,\\r\\n            \\\"Prosumer Already disapproved by you\\\"\\r\\n        );\\r\\n\\r\\n        disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] = true;\\r\\n\\r\\n        //If approved earlier then disapprove\\r\\n        if (disapproved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender]) {\\r\\n            approved[unApprovedProsumers[_unApprovedProsumerID]._address][msg.sender] = false;\\r\\n        }\\r\\n\\r\\n        if (_getDisApprovalCount(_unApprovedProsumerID) > required) {\\r\\n            //if yes then remove him from unapprove array & don't store in approved array\\r\\n            deleteElementFrom_UnApprovedProsumers(_unApprovedProsumerID);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //-->5. Witdhraw Funds (Pending , send funds equally to all prosumer)  //Can only be called when Transaction array will be zero.\\r\\n    //TODO:\\r\\n\\r\\n    //-->^^^^^^^^^^^^^^^^^^^^^^^^ Process Trade ^^^^^^^^^^^^^^^^^^^^\\r\\n    function processTrade() public onlyOwner {\\r\\n        //Designed to process multiple Trade with a single click\\r\\n        require(Transaction.length != 0, \\\"No pending Transaction to execute\\\");\\r\\n        for (uint256 i = 0; i < Transaction.length; i++) {\\r\\n            _transfer(escrowAccount, Transaction[i]._consumer, Transaction[i]._consumerEnergyNeed);\\r\\n            (bool callSuccess, ) = payable(Transaction[i]._producer).call{\\r\\n                value: Transaction[i]._producerPaybleAmount\\r\\n            }(\\\"\\\"); //Transfering energy tokens to the producer\\r\\n            require(callSuccess, \\\"Call failed\\\");\\r\\n        }\\r\\n\\r\\n        delete Transaction; //Empty the pending Transaction array after all the transaction processed\\r\\n    }\\r\\n\\r\\n    function viewEscrowBalance() public view returns (uint256, uint256) {\\r\\n        return (address(this).balance, balanceOf(escrowAccount));\\r\\n    }\\r\\n\\r\\n    /********************PROSUMER FUNCTION**********************************/\\r\\n\\r\\n    function isRequested() internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < unApprovedProsumers.length; i++) {\\r\\n            if (msg.sender == unApprovedProsumers[i]._address) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function req_Registration(uint256 _aadharNo) public payable {\\r\\n        require(msg.value >= regFee, \\\"Registration Failed, Insufficient Fee\\\");\\r\\n        require(!isProsumer[msg.sender], \\\"You are already a Prosumer in the Network\\\");\\r\\n        require(!isRequested(), \\\"You have already requested for Registration\\\");\\r\\n\\r\\n        uint256 digitCheck = _aadharNo;\\r\\n        uint256 digits = 0;\\r\\n\\r\\n        while (digitCheck != 0) {\\r\\n            digitCheck /= 10;\\r\\n            digits++;\\r\\n        }\\r\\n\\r\\n        require(digits == 12, \\\"Enter a 12 digit Aadhar No.\\\");\\r\\n\\r\\n        //Create a prosumer object\\r\\n        prosumer memory _prosumer = prosumer({\\r\\n            _prosumerID: 0,\\r\\n            _address: msg.sender,\\r\\n            _aadharId: _aadharNo,\\r\\n            _approved: false,\\r\\n            _energyUnitPriceUSD: 0,\\r\\n            _energyUnitPriceMatic: 0,\\r\\n            _stakedEnergyBalance: 0\\r\\n        });\\r\\n\\r\\n        //Push the prosumer object to unApprovedProsumerArray\\r\\n        unApprovedProsumers.push(_prosumer);\\r\\n    }\\r\\n\\r\\n    /*-------------------Producer--------------------------------------------------------------*/\\r\\n\\r\\n    uint256 EnergyUnitPrice_usd;\\r\\n    uint256 EnergyUnitPrice_matic;\\r\\n\\r\\n    function setUnitPrice(uint256 price) internal onlyProsumer returns (uint256) {\\r\\n        EnergyUnitPrice_usd = price;\\r\\n        uint256 latestMaticPrice = uint(getLatestPrice());\\r\\n        EnergyUnitPrice_matic = (price / latestMaticPrice) * 1e8;\\r\\n        return EnergyUnitPrice_matic;\\r\\n    }\\r\\n\\r\\n    function advert(\\r\\n        uint256 unitEnergyPrice,\\r\\n        uint256 excessEnergyToken\\r\\n    ) public onlyProsumer returns (uint256) {\\r\\n        transfer(escrowAccount, excessEnergyToken);\\r\\n\\r\\n        uint256 ad_placerID = prosumerID[msg.sender];\\r\\n\\r\\n        ApprovedProsumers[ad_placerID - 1]._energyUnitPriceUSD = unitEnergyPrice;\\r\\n        ApprovedProsumers[ad_placerID - 1]._energyUnitPriceMatic = (setUnitPrice(unitEnergyPrice));\\r\\n        ApprovedProsumers[ad_placerID - 1]._stakedEnergyBalance = excessEnergyToken;\\r\\n\\r\\n        return ad_placerID;\\r\\n    }\\r\\n\\r\\n    function mySetUnitPrice_Matic() public view onlyProsumer returns (uint256) {\\r\\n        return ApprovedProsumers[prosumerID[msg.sender] - 1]._energyUnitPriceMatic;\\r\\n    }\\r\\n\\r\\n    function mySetUnitPrice_USD() public view onlyProsumer returns (uint256) {\\r\\n        return ApprovedProsumers[prosumerID[msg.sender] - 1]._energyUnitPriceUSD;\\r\\n    }\\r\\n\\r\\n    //mint  TODO:(Needs overriding, because now any user can access the default and mint function)\\r\\n    function produceEnergy(uint256 energyProduced) public onlyProsumer {\\r\\n        _mint(msg.sender, energyProduced);\\r\\n    }\\r\\n\\r\\n    //burn\\r\\n    function burnEnergy(uint256 energyBurned) public onlyProsumer {\\r\\n        _burn(msg.sender, energyBurned);\\r\\n    }\\r\\n\\r\\n    /*-------------------Consumer--------------------------------------------------------------*/\\r\\n\\r\\n    function bid(uint256 producerID, uint256 energy_need) public payable onlyProsumer {\\r\\n        uint256 MinPayableAmount = ApprovedProsumers[producerID - 1]._energyUnitPriceMatic *\\r\\n            energy_need;\\r\\n        require(msg.value >= MinPayableAmount, \\\"Didn't send enough Matic!\\\");\\r\\n        require(\\r\\n            energy_need <= ApprovedProsumers[producerID - 1]._stakedEnergyBalance,\\r\\n            \\\"Selected Producer do have enough Enough Energy Balance\\\"\\r\\n        );\\r\\n\\r\\n        Txn memory _txn = Txn({\\r\\n            _producer: prosumerAddress[producerID],\\r\\n            _consumer: msg.sender,\\r\\n            _producerID: producerID,\\r\\n            _consumerID: prosumerID[msg.sender],\\r\\n            _consumerEnergyNeed: energy_need,\\r\\n            _producerUnitPrice: ApprovedProsumers[producerID - 1]._energyUnitPriceMatic,\\r\\n            _producerPaybleAmount: MinPayableAmount\\r\\n        });\\r\\n\\r\\n        Transaction.push(_txn);\\r\\n\\r\\n        ApprovedProsumers[producerID - 1]._stakedEnergyBalance =\\r\\n            ApprovedProsumers[producerID - 1]._stakedEnergyBalance -\\r\\n            energy_need;\\r\\n    }\\r\\n\\r\\n    function viewMaticBalance() public view returns (uint256) {\\r\\n        return msg.sender.balance;\\r\\n    }\\r\\n\\r\\n    function viewEnergyBalance() public view returns (uint256) {\\r\\n        return balanceOf(msg.sender);\\r\\n    }\\r\\n\\r\\n    /****************Modifiers************/\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner[msg.sender], \\\"Not Owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyProsumer() {\\r\\n        require(isProsumer[msg.sender], \\\"Not Prosumer\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x49b45564fc8b54528118c69a0d696f7b0067918e3bca4e977ca43aa4de29f5b9\",\"license\":\"UNLICENSED\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract PriceConverter {\\r\\n    AggregatorV3Interface internal priceFeed;\\r\\n\\r\\n    /**\\r\\n     * Network: Polygon Mumbai\\r\\n     * Aggregator: MATIC/USD\\r\\n     * Address: 0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada\\r\\n     */\\r\\n    constructor() {\\r\\n        priceFeed = AggregatorV3Interface(0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the latest price\\r\\n     */\\r\\n    function getLatestPrice() public view returns (int) {\\r\\n        (\\r\\n            ,\\r\\n            /*uint80 roundID*/ int price /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\\r\\n            ,\\r\\n            ,\\r\\n\\r\\n        ) = priceFeed.latestRoundData();\\r\\n        return price;\\r\\n    }\\r\\n}\\r\\n\\r\\n// $ 1.14973259\\r\\n\",\"keccak256\":\"0x09d0ff105733ae98f85fd50568b9b9e97de5d6bfa3f67d5f44047cb18a5c2515\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102715760003560e01c80637fb400f91161014f5780639ff34115116100c1578063e4f6ea881161007a578063e4f6ea88146109f8578063e706d56814610a23578063e814db5914610a4e578063f4b1604514610a77578063f85bae7814610ab4578063fdbd2e8b14610af157610271565b80639ff34115146108d1578063a457c2d7146108ed578063a9059cbb1461092a578063c7a7275e14610967578063dc8452cd14610990578063dd62ed3e146109bb57610271565b80638fac6371116101135780638fac6371146107955780638fff20f3146107d257806395d89b41146107fd57806396acb79a146108285780639c01a6df146108655780639dc29fac146108a857610271565b80637fb400f9146106d457806383ae0367146106fd5780638bda812f146107285780638e15f473146107535780638ec90e5e1461077e57610271565b80633628c333116101e85780634ef8ab77116101ac5780634ef8ab771461058d578063598647f8146105d0578063612536fc146105ec578063677f502e1461061757806370a082311461065a5780637b78bc6b1461069757610271565b80633628c333146104a757806339509351146104d357806340c10f19146105105780634ca46d19146105395780634ec9dd8d1461056257610271565b80630b6d83e21161023a5780630b6d83e2146103835780630e264f80146103ac57806318160ddd146103d757806323b872dd146104025780632f54bf6e1461043f578063313ce5671461047c57610271565b80621cfdce14610276578063025e7c27146102b357806306ed1f80146102f057806306fdde031461031b578063095ea7b314610346575b600080fd5b34801561028257600080fd5b5061029d600480360381019061029891906148af565b610b2e565b6040516102aa91906148f5565b60405180910390f35b3480156102bf57600080fd5b506102da60048036038101906102d5919061493c565b610b46565b6040516102e79190614978565b60405180910390f35b3480156102fc57600080fd5b50610305610b85565b6040516103129190614b09565b60405180910390f35b34801561032757600080fd5b50610330610e65565b60405161033d9190614bc4565b60405180910390f35b34801561035257600080fd5b5061036d60048036038101906103689190614be6565b610ef7565b60405161037a9190614c35565b60405180910390f35b34801561038f57600080fd5b506103aa60048036038101906103a5919061493c565b610f1a565b005b3480156103b857600080fd5b506103c1610fb3565b6040516103ce91906148f5565b60405180910390f35b3480156103e357600080fd5b506103ec6110b7565b6040516103f991906148f5565b60405180910390f35b34801561040e57600080fd5b5061042960048036038101906104249190614c50565b6110c1565b6040516104369190614c35565b60405180910390f35b34801561044b57600080fd5b50610466600480360381019061046191906148af565b6110f0565b6040516104739190614c35565b60405180910390f35b34801561048857600080fd5b50610491611110565b60405161049e9190614cbf565b60405180910390f35b3480156104b357600080fd5b506104bc611119565b6040516104ca929190614cda565b60405180910390f35b3480156104df57600080fd5b506104fa60048036038101906104f59190614be6565b611150565b6040516105079190614c35565b60405180910390f35b34801561051c57600080fd5b5061053760048036038101906105329190614be6565b611187565b005b34801561054557600080fd5b50610560600480360381019061055b919061493c565b611195565b005b34801561056e57600080fd5b50610577611625565b60405161058491906148f5565b60405180910390f35b34801561059957600080fd5b506105b460048036038101906105af919061493c565b611729565b6040516105c79796959493929190614d03565b60405180910390f35b6105ea60048036038101906105e59190614d72565b6117a8565b005b3480156105f857600080fd5b50610601611b98565b60405161060e9190614b09565b60405180910390f35b34801561062357600080fd5b5061063e6004803603810190610639919061493c565b611c9a565b6040516106519796959493929190614db2565b60405180910390f35b34801561066657600080fd5b50610681600480360381019061067c91906148af565b611d2c565b60405161068e91906148f5565b60405180910390f35b3480156106a357600080fd5b506106be60048036038101906106b991906148af565b611d74565b6040516106cb9190614bc4565b60405180910390f35b3480156106e057600080fd5b506106fb60048036038101906106f6919061493c565b611fd8565b005b34801561070957600080fd5b50610712612071565b60405161071f91906148f5565b60405180910390f35b34801561073457600080fd5b5061073d612081565b60405161074a91906148f5565b60405180910390f35b34801561075f57600080fd5b506107686120a0565b6040516107759190614e3a565b60405180910390f35b34801561078a57600080fd5b50610793612150565b005b3480156107a157600080fd5b506107bc60048036038101906107b7919061493c565b612407565b6040516107c99190614978565b60405180910390f35b3480156107de57600080fd5b506107e761243a565b6040516107f491906148f5565b60405180910390f35b34801561080957600080fd5b50610812612440565b60405161081f9190614bc4565b60405180910390f35b34801561083457600080fd5b5061084f600480360381019061084a9190614d72565b6124d2565b60405161085c91906148f5565b60405180910390f35b34801561087157600080fd5b5061088c6004803603810190610887919061493c565b612685565b60405161089f9796959493929190614d03565b60405180910390f35b3480156108b457600080fd5b506108cf60048036038101906108ca9190614be6565b612704565b005b6108eb60048036038101906108e6919061493c565b612712565b005b3480156108f957600080fd5b50610914600480360381019061090f9190614be6565b6129c2565b6040516109219190614c35565b60405180910390f35b34801561093657600080fd5b50610951600480360381019061094c9190614be6565b612a39565b60405161095e9190614c35565b60405180910390f35b34801561097357600080fd5b5061098e6004803603810190610989919061493c565b612a5c565b005b34801561099c57600080fd5b506109a5613262565b6040516109b291906148f5565b60405180910390f35b3480156109c757600080fd5b506109e260048036038101906109dd9190614e55565b613268565b6040516109ef91906148f5565b60405180910390f35b348015610a0457600080fd5b50610a0d6132ef565b604051610a1a9190614b09565b60405180910390f35b348015610a2f57600080fd5b50610a386135cf565b604051610a459190614b09565b60405180910390f35b348015610a5a57600080fd5b50610a756004803603810190610a70919061493c565b61375d565b005b348015610a8357600080fd5b50610a9e6004803603810190610a999190614e55565b6137f3565b604051610aab9190614c35565b60405180910390f35b348015610ac057600080fd5b50610adb6004803603810190610ad69190614e55565b613822565b604051610ae89190614c35565b60405180910390f35b348015610afd57600080fd5b50610b186004803603810190610b1391906148af565b613851565b604051610b259190614c35565b60405180910390f35b600d6020528060005260406000206000915090505481565b60068181548110610b5657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0a90614ee1565b60405180910390fd5b600060118054905067ffffffffffffffff811115610c3457610c33614f01565b5b604051908082528060200260200182016040528015610c6d57816020015b610c5a614746565b815260200190600190039081610c525790505b50905060005b601180549050811015610e5d5760011515600f600060118481548110610c9c57610c9b614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415610e4a5760118181548110610d6f57610d6e614f30565b5b90600052602060002090600702016040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460ff161515151581526020016004820154815260200160058201548152602001600682015481525050828281518110610e3e57610e3d614f30565b5b60200260200101819052505b8080610e5590614f8e565b915050610c73565b508091505090565b606060038054610e7490615006565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea090615006565b8015610eed5780601f10610ec257610100808354040283529160200191610eed565b820191906000526020600020905b815481529060010190602001808311610ed057829003601f168201915b5050505050905090565b600080610f02613871565b9050610f0f818585613879565b600191505092915050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610fa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9d90615084565b60405180910390fd5b610fb03382613a44565b50565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611041576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103890615084565b60405180910390fd5b600e6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461108f91906150a4565b815481106110a05761109f614f30565b5b906000526020600020906007020160040154905090565b6000600254905090565b6000806110cc613871565b90506110d9858285613b9b565b6110e4858585613c27565b60019150509392505050565b60076020528060005260406000206000915054906101000a900460ff1681565b60006012905090565b60008047611148600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611d2c565b915091509091565b60008061115b613871565b905061117c81858561116d8589613268565b61117791906150d8565b613879565b600191505092915050565b6111918282613a44565b5050565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611221576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121890614ee1565b60405180910390fd5b6011805490508110611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125f9061517a565b60405180910390fd5b60001515601060006011848154811061128457611283614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461137d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113749061520c565b60405180910390fd5b6001601060006011848154811061139757611396614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550601060006011838154811061146f5761146e614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611606576000600f60006011848154811061154557611544614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b60085461161282613e9f565b11156116225761162181613fee565b5b50565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166116b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116aa90615084565b60405180910390fd5b600e6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461170191906150a4565b8154811061171257611711614f30565b5b906000526020600020906007020160050154905090565b600e818154811061173957600080fd5b90600052602060002090600702016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900460ff16908060040154908060050154908060060154905087565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182b90615084565b60405180910390fd5b600081600e60018561184691906150a4565b8154811061185757611856614f30565b5b906000526020600020906007020160050154611873919061522c565b9050803410156118b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118af906152d2565b60405180910390fd5b600e6001846118c791906150a4565b815481106118d8576118d7614f30565b5b90600052602060002090600702016006015482111561192c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192390615364565b60405180910390fd5b60006040518060e00160405280600c600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001858152602001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001848152602001600e600187611a0491906150a4565b81548110611a1557611a14614f30565b5b9060005260206000209060070201600501548152602001838152509050601281908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155505082600e600186611b3091906150a4565b81548110611b4157611b40614f30565b5b906000526020600020906007020160060154611b5d91906150a4565b600e600186611b6c91906150a4565b81548110611b7d57611b7c614f30565b5b90600052602060002090600702016006018190555050505050565b6060600e805480602002602001604051908101604052809291908181526020016000905b82821015611c9157838290600052602060002090600702016040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460ff16151515158152602001600482015481526020016005820154815260200160068201548152505081526020019060010190611bbc565b50505050905090565b60128181548110611caa57600080fd5b90600052602060002090600702016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060154905087565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611e02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df990614ee1565b60405180910390fd5b600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611ece576040518060400160405280601181526020017f50726f73756d657220417070726f7665640000000000000000000000000000008152509050611fd3565b601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611f9a576040518060400160405280601481526020017f50726f73756d657220446973617070726f7665640000000000000000000000008152509050611fd3565b6040518060400160405280601981526020017f50726f73756d6572204e6f7420417070726f766564205965740000000000000081525090505b919050565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612064576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205b90615084565b60405180910390fd5b61206e338261429e565b50565b600061207c33611d2c565b905090565b60003373ffffffffffffffffffffffffffffffffffffffff1631905090565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561210b57600080fd5b505afa15801561211f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121439190615407565b5050509150508091505090565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166121dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d390614ee1565b60405180910390fd5b60006012805490501415612225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221c906154f4565b60405180910390fd5b60005b6012805490508110156123f6576122cc600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166012838154811061226f5761226e614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601284815481106122b5576122b4614f30565b5b906000526020600020906007020160040154613c27565b6000601282815481106122e2576122e1614f30565b5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166012838154811061233e5761233d614f30565b5b90600052602060002090600702016006015460405161235c90615545565b60006040518083038185875af1925050503d8060008114612399576040519150601f19603f3d011682016040523d82523d6000602084013e61239e565b606091505b50509050806123e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123d9906155a6565b60405180910390fd5b5080806123ee90614f8e565b915050612228565b5060126000612405919061479b565b565b600c6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60606004805461244f90615006565b80601f016020809104026020016040519081016040528092919081815260200182805461247b90615006565b80156124c85780601f1061249d576101008083540402835291602001916124c8565b820191906000526020600020905b8154815290600101906020018083116124ab57829003601f168201915b5050505050905090565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612560576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255790615084565b60405180910390fd5b61258c600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683612a39565b506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083600e6001836125e191906150a4565b815481106125f2576125f1614f30565b5b9060005260206000209060070201600401819055506126108461446c565b600e60018361261f91906150a4565b815481106126305761262f614f30565b5b90600052602060002090600702016005018190555082600e60018361265591906150a4565b8154811061266657612665614f30565b5b9060005260206000209060070201600601819055508091505092915050565b6011818154811061269557600080fd5b90600052602060002090600702016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900460ff16908060040154908060050154908060060154905087565b61270e828261429e565b5050565b600954341015612757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274e90615638565b60405180910390fd5b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156127e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127db906156ca565b60405180910390fd5b6127ec614539565b1561282c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128239061575c565b60405180910390fd5b600081905060005b6000821461285e57600a8261284991906157ab565b9150808061285690614f8e565b915050612834565b600c81146128a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289890615828565b60405180910390fd5b60006040518060e00160405280600081526020013373ffffffffffffffffffffffffffffffffffffffff16815260200185815260200160001515815260200160008152602001600081526020016000815250905060118190806001815401808255809150506001900390600052602060002090600702016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055506080820151816004015560a0820151816005015560c08201518160060155505050505050565b6000806129cd613871565b905060006129db8286613268565b905083811015612a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a17906158ba565b60405180910390fd5b612a2d8286868403613879565b60019250505092915050565b600080612a44613871565b9050612a51818585613c27565b600191505092915050565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612adf90614ee1565b60405180910390fd5b6011805490508110612b2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b269061517a565b60405180910390fd5b60001515600f600060118481548110612b4b57612b4a614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514612c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3b90615926565b60405180910390fd5b6001600f600060118481548110612c5e57612c5d614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506010600060118381548110612d3657612d35614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612ecd5760006010600060118481548110612e0c57612e0b614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b600854612ed9826145ed565b1061325f57600160118281548110612ef457612ef3614f30565b5b906000526020600020906007020160030160006101000a81548160ff0219169083151502179055506001600e80549050612f2e91906150d8565b60118281548110612f4257612f41614f30565b5b9060005260206000209060070201600001819055506001600b600060118481548110612f7157612f70614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600e6011828154811061300a57613009614f30565b5b90600052602060002090600702019080600181540180825580915050600190039060005260206000209060070201600090919091909150600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820160009054906101000a900460ff168160030160006101000a81548160ff021916908315150217905550600482015481600401556005820154816005015560068201548160060155505061311281613fee565b600e6001600e8054905061312691906150a4565b8154811061313757613136614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600c6000600e80549050815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e80549050600d6000600e6001600e805490506131dd91906150a4565b815481106131ee576131ed614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50565b60085481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6060600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661337d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161337490614ee1565b60405180910390fd5b600060118054905067ffffffffffffffff81111561339e5761339d614f01565b5b6040519080825280602002602001820160405280156133d757816020015b6133c4614746565b8152602001906001900390816133bc5790505b50905060005b6011805490508110156135c75760001515600f60006011848154811061340657613405614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514156135b457601181815481106134d9576134d8614f30565b5b90600052602060002090600702016040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460ff1615151515815260200160048201548152602001600582015481526020016006820154815250508282815181106135a8576135a7614f30565b5b60200260200101819052505b80806135bf90614f8e565b9150506133dd565b508091505090565b6060600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661365d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161365490614ee1565b60405180910390fd5b6011805480602002602001604051908101604052809291908181526020016000905b8282101561375457838290600052602060002090600702016040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460ff1615151515815260200160048201548152602001600582015481526020016006820154815250508152602001906001019061367f565b50505050905090565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166137e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137e090614ee1565b60405180910390fd5b8060098190555050565b600f6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60106020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600b6020528060005260406000206000915054906101000a900460ff1681565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156138e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138e0906159b8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613959576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161395090615a4a565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051613a3791906148f5565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613aab90615ab6565b60405180910390fd5b613ac06000838361473c565b8060026000828254613ad291906150d8565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613b8391906148f5565b60405180910390a3613b9760008383614741565b5050565b6000613ba78484613268565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114613c215781811015613c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c0a90615b22565b60405180910390fd5b613c208484848403613879565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613c97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c8e90615bb4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613cfe90615c46565b60405180910390fd5b613d1283838361473c565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015613d98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d8f90615cd8565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051613e8691906148f5565b60405180910390a3613e99848484614741565b50505050565b600080600090505b600680549050811015613fe8576010600060118581548110613ecc57613ecb614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600060068381548110613f4e57613f4d614f30565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615613fd5578082613fd291906150d8565b91505b8080613fe090614f8e565b915050613ea7565b50919050565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661407a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161407190614ee1565b60405180910390fd5b60118054905081106140c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016140b890615d44565b60405180910390fd5b60008190505b60016011805490506140d991906150a4565b81101561420c5760116001826140ef91906150d8565b81548110614100576140ff614f30565b5b90600052602060002090600702016011828154811061412257614121614f30565b5b9060005260206000209060070201600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201556003820160009054906101000a900460ff168160030160006101000a81548160ff021916908315150217905550600482015481600401556005820154816005015560068201548160060155905050808061420490614f8e565b9150506140c7565b50601180548061421f5761421e615d64565b5b60019003818190600052602060002090600702016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160006101000a81549060ff02191690556004820160009055600582016000905560068201600090555050905550565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561430e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161430590615e05565b60405180910390fd5b61431a8260008361473c565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156143a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161439790615e97565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161445391906148f5565b60405180910390a361446783600084614741565b505050565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166144fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016144f190615084565b60405180910390fd5b81601381905550600061450b6120a0565b90506305f5e100818461451e91906157ab565b614528919061522c565b601481905550601454915050919050565b600080600090505b6011805490508110156145e4576011818154811061456257614561614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156145d15760019150506145ea565b80806145dc90614f8e565b915050614541565b50600090505b90565b600080600090505b60068054905081101561473657600f60006011858154811061461a57614619614f30565b5b906000526020600020906007020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006006838154811061469c5761469b614f30565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561472357818061471f90614f8e565b9250505b808061472e90614f8e565b9150506145f5565b50919050565b505050565b505050565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581526020016000815260200160008152602001600081525090565b50805460008255600702906000526020600020908101906147bc91906147bf565b50565b5b8082111561484857600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160009055600482016000905560058201600090556006820160009055506007016147c0565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061487c82614851565b9050919050565b61488c81614871565b811461489757600080fd5b50565b6000813590506148a981614883565b92915050565b6000602082840312156148c5576148c461484c565b5b60006148d38482850161489a565b91505092915050565b6000819050919050565b6148ef816148dc565b82525050565b600060208201905061490a60008301846148e6565b92915050565b614919816148dc565b811461492457600080fd5b50565b60008135905061493681614910565b92915050565b6000602082840312156149525761495161484c565b5b600061496084828501614927565b91505092915050565b61497281614871565b82525050565b600060208201905061498d6000830184614969565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6149c8816148dc565b82525050565b6149d781614871565b82525050565b60008115159050919050565b6149f2816149dd565b82525050565b60e082016000820151614a0e60008501826149bf565b506020820151614a2160208501826149ce565b506040820151614a3460408501826149bf565b506060820151614a4760608501826149e9565b506080820151614a5a60808501826149bf565b5060a0820151614a6d60a08501826149bf565b5060c0820151614a8060c08501826149bf565b50505050565b6000614a9283836149f8565b60e08301905092915050565b6000602082019050919050565b6000614ab682614993565b614ac0818561499e565b9350614acb836149af565b8060005b83811015614afc578151614ae38882614a86565b9750614aee83614a9e565b925050600181019050614acf565b5085935050505092915050565b60006020820190508181036000830152614b238184614aab565b905092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614b65578082015181840152602081019050614b4a565b83811115614b74576000848401525b50505050565b6000601f19601f8301169050919050565b6000614b9682614b2b565b614ba08185614b36565b9350614bb0818560208601614b47565b614bb981614b7a565b840191505092915050565b60006020820190508181036000830152614bde8184614b8b565b905092915050565b60008060408385031215614bfd57614bfc61484c565b5b6000614c0b8582860161489a565b9250506020614c1c85828601614927565b9150509250929050565b614c2f816149dd565b82525050565b6000602082019050614c4a6000830184614c26565b92915050565b600080600060608486031215614c6957614c6861484c565b5b6000614c778682870161489a565b9350506020614c888682870161489a565b9250506040614c9986828701614927565b9150509250925092565b600060ff82169050919050565b614cb981614ca3565b82525050565b6000602082019050614cd46000830184614cb0565b92915050565b6000604082019050614cef60008301856148e6565b614cfc60208301846148e6565b9392505050565b600060e082019050614d18600083018a6148e6565b614d256020830189614969565b614d3260408301886148e6565b614d3f6060830187614c26565b614d4c60808301866148e6565b614d5960a08301856148e6565b614d6660c08301846148e6565b98975050505050505050565b60008060408385031215614d8957614d8861484c565b5b6000614d9785828601614927565b9250506020614da885828601614927565b9150509250929050565b600060e082019050614dc7600083018a614969565b614dd46020830189614969565b614de160408301886148e6565b614dee60608301876148e6565b614dfb60808301866148e6565b614e0860a08301856148e6565b614e1560c08301846148e6565b98975050505050505050565b6000819050919050565b614e3481614e21565b82525050565b6000602082019050614e4f6000830184614e2b565b92915050565b60008060408385031215614e6c57614e6b61484c565b5b6000614e7a8582860161489a565b9250506020614e8b8582860161489a565b9150509250929050565b7f4e6f74204f776e65720000000000000000000000000000000000000000000000600082015250565b6000614ecb600983614b36565b9150614ed682614e95565b602082019050919050565b60006020820190508181036000830152614efa81614ebe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614f99826148dc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614fcc57614fcb614f5f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061501e57607f821691505b6020821081141561503257615031614fd7565b5b50919050565b7f4e6f742050726f73756d65720000000000000000000000000000000000000000600082015250565b600061506e600c83614b36565b915061507982615038565b602082019050919050565b6000602082019050818103600083015261509d81615061565b9050919050565b60006150af826148dc565b91506150ba836148dc565b9250828210156150cd576150cc614f5f565b5b828203905092915050565b60006150e3826148dc565b91506150ee836148dc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561512357615122614f5f565b5b828201905092915050565b7f496e76616c696420556e617070726f7665642050726f73756d65722049440000600082015250565b6000615164601e83614b36565b915061516f8261512e565b602082019050919050565b6000602082019050818103600083015261519381615157565b9050919050565b7f50726f73756d657220416c726561647920646973617070726f7665642062792060008201527f796f750000000000000000000000000000000000000000000000000000000000602082015250565b60006151f6602383614b36565b91506152018261519a565b604082019050919050565b60006020820190508181036000830152615225816151e9565b9050919050565b6000615237826148dc565b9150615242836148dc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561527b5761527a614f5f565b5b828202905092915050565b7f4469646e27742073656e6420656e6f756768204d617469632100000000000000600082015250565b60006152bc601983614b36565b91506152c782615286565b602082019050919050565b600060208201905081810360008301526152eb816152af565b9050919050565b7f53656c65637465642050726f647563657220646f206861766520656e6f75676860008201527f20456e6f75676820456e657267792042616c616e636500000000000000000000602082015250565b600061534e603683614b36565b9150615359826152f2565b604082019050919050565b6000602082019050818103600083015261537d81615341565b9050919050565b600069ffffffffffffffffffff82169050919050565b6153a381615384565b81146153ae57600080fd5b50565b6000815190506153c08161539a565b92915050565b6153cf81614e21565b81146153da57600080fd5b50565b6000815190506153ec816153c6565b92915050565b60008151905061540181614910565b92915050565b600080600080600060a086880312156154235761542261484c565b5b6000615431888289016153b1565b9550506020615442888289016153dd565b9450506040615453888289016153f2565b9350506060615464888289016153f2565b9250506080615475888289016153b1565b9150509295509295909350565b7f4e6f2070656e64696e67205472616e73616374696f6e20746f2065786563757460008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006154de602183614b36565b91506154e982615482565b604082019050919050565b6000602082019050818103600083015261550d816154d1565b9050919050565b600081905092915050565b50565b600061552f600083615514565b915061553a8261551f565b600082019050919050565b600061555082615522565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000615590600b83614b36565b915061559b8261555a565b602082019050919050565b600060208201905081810360008301526155bf81615583565b9050919050565b7f526567697374726174696f6e204661696c65642c20496e73756666696369656e60008201527f7420466565000000000000000000000000000000000000000000000000000000602082015250565b6000615622602583614b36565b915061562d826155c6565b604082019050919050565b6000602082019050818103600083015261565181615615565b9050919050565b7f596f752061726520616c726561647920612050726f73756d657220696e20746860008201527f65204e6574776f726b0000000000000000000000000000000000000000000000602082015250565b60006156b4602983614b36565b91506156bf82615658565b604082019050919050565b600060208201905081810360008301526156e3816156a7565b9050919050565b7f596f75206861766520616c72656164792072657175657374656420666f72205260008201527f6567697374726174696f6e000000000000000000000000000000000000000000602082015250565b6000615746602b83614b36565b9150615751826156ea565b604082019050919050565b6000602082019050818103600083015261577581615739565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006157b6826148dc565b91506157c1836148dc565b9250826157d1576157d061577c565b5b828204905092915050565b7f456e746572206120313220646967697420416164686172204e6f2e0000000000600082015250565b6000615812601b83614b36565b915061581d826157dc565b602082019050919050565b6000602082019050818103600083015261584181615805565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006158a4602583614b36565b91506158af82615848565b604082019050919050565b600060208201905081810360008301526158d381615897565b9050919050565b7f50726f73756d657220416c726561647920617070726f76656420627920796f75600082015250565b6000615910602083614b36565b915061591b826158da565b602082019050919050565b6000602082019050818103600083015261593f81615903565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006159a2602483614b36565b91506159ad82615946565b604082019050919050565b600060208201905081810360008301526159d181615995565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000615a34602283614b36565b9150615a3f826159d8565b604082019050919050565b60006020820190508181036000830152615a6381615a27565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000615aa0601f83614b36565b9150615aab82615a6a565b602082019050919050565b60006020820190508181036000830152615acf81615a93565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000615b0c601d83614b36565b9150615b1782615ad6565b602082019050919050565b60006020820190508181036000830152615b3b81615aff565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000615b9e602583614b36565b9150615ba982615b42565b604082019050919050565b60006020820190508181036000830152615bcd81615b91565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000615c30602383614b36565b9150615c3b82615bd4565b604082019050919050565b60006020820190508181036000830152615c5f81615c23565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000615cc2602683614b36565b9150615ccd82615c66565b604082019050919050565b60006020820190508181036000830152615cf181615cb5565b9050919050565b7f496e76616c696420756e617070726f76656450726f73756d657220496e646578600082015250565b6000615d2e602083614b36565b9150615d3982615cf8565b602082019050919050565b60006020820190508181036000830152615d5d81615d21565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000615def602183614b36565b9150615dfa82615d93565b604082019050919050565b60006020820190508181036000830152615e1e81615de2565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000615e81602283614b36565b9150615e8c82615e25565b604082019050919050565b60006020820190508181036000830152615eb081615e74565b905091905056fea264697066735822122063888b78a742e2ec5cb9a4821f074db31f1f044045ee43d45cef43b97c50b03964736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLatestPrice()": {
        "notice": "Returns the latest price"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 67,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 69,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 71,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1985,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 808,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "owners",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 812,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "isOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 814,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "required",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 816,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "regFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 818,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "escrowAccount",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 837,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "isProsumer",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 841,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "prosumerAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 845,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "prosumerID",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 849,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "ApprovedProsumers",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(prosumer)833_storage)dyn_storage"
      },
      {
        "astId": 855,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "approved",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 861,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "disapproved",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 865,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "unApprovedProsumers",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_struct(prosumer)833_storage)dyn_storage"
      },
      {
        "astId": 884,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "Transaction",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(Txn)880_storage)dyn_storage"
      },
      {
        "astId": 1691,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "EnergyUnitPrice_usd",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 1693,
        "contract": "contracts/EnergyTrade.sol:EnergyTrade",
        "label": "EnergyUnitPrice_matic",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Txn)880_storage)dyn_storage": {
        "base": "t_struct(Txn)880_storage",
        "encoding": "dynamic_array",
        "label": "struct EnergyTrade.Txn[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(prosumer)833_storage)dyn_storage": {
        "base": "t_struct(prosumer)833_storage",
        "encoding": "dynamic_array",
        "label": "struct EnergyTrade.prosumer[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Txn)880_storage": {
        "encoding": "inplace",
        "label": "struct EnergyTrade.Txn",
        "members": [
          {
            "astId": 867,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_producer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 869,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_consumer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 871,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_producerID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 873,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_consumerID",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 875,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_consumerEnergyNeed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 877,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_producerUnitPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 879,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_producerPaybleAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(prosumer)833_storage": {
        "encoding": "inplace",
        "label": "struct EnergyTrade.prosumer",
        "members": [
          {
            "astId": 820,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_prosumerID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 822,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_address",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 824,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_aadharId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 826,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_approved",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 828,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_energyUnitPriceUSD",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 830,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_energyUnitPriceMatic",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 832,
            "contract": "contracts/EnergyTrade.sol:EnergyTrade",
            "label": "_stakedEnergyBalance",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}